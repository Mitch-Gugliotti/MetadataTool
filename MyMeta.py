# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MetadataTool_GUI_V2.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog, QMessageBox, QSizePolicy
from PyQt5 import *
import arcgis
from arcgis.gis import GIS
import xml.etree.ElementTree as ET
import os


class Ui_MyMeta(object):
    def setupUi(self, MyMeta):
        MyMeta.setObjectName("MyMeta")
        MyMeta.resize(1320, 912)
        MyMeta.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.MyMetaWindow = QtWidgets.QWidget(MyMeta)
        self.MyMetaWindow.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.MyMetaWindow.setObjectName("MyMetaWindow")
        self.gridLayout = QtWidgets.QGridLayout(self.MyMetaWindow)
        self.gridLayout.setContentsMargins(10, 10, 10, 10)
        self.gridLayout.setSpacing(5)
        self.gridLayout.setObjectName("gridLayout")
        self.scrollArea = QtWidgets.QScrollArea(self.MyMetaWindow)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1298, 849))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.TabController = QtWidgets.QTabWidget(self.scrollAreaWidgetContents)
        self.TabController.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.TabController.setObjectName("TabController")
        self.TitlesAndDates = QtWidgets.QWidget()
        self.TitlesAndDates.setStyleSheet("background-color: rgb(0, 0, 127);")
        self.TitlesAndDates.setObjectName("TitlesAndDates")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.TitlesAndDates)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.TempStartCal = QtWidgets.QCalendarWidget(self.TitlesAndDates)
        self.TempStartCal.setStyleSheet("background-color: rgb(255, 255, 255);\n""color: rgb(0, 0, 0);")
        self.TempStartCal.setObjectName("TempStartCal")
        self.gridLayout_3.addWidget(self.TempStartCal, 5, 5, 1, 1)
        self.StatusLab = QtWidgets.QLabel(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.StatusLab.setFont(font)
        self.StatusLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.StatusLab.setObjectName("StatusLab")
        self.gridLayout_3.addWidget(self.StatusLab, 2, 4, 1, 1)
        self.MetaUpFreqLab = QtWidgets.QLabel(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaUpFreqLab.setFont(font)
        self.MetaUpFreqLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.MetaUpFreqLab.setObjectName("MetaUpFreqLab")
        self.gridLayout_3.addWidget(self.MetaUpFreqLab, 3, 4, 1, 1)
        self.MetaUpCal = QtWidgets.QCalendarWidget(self.TitlesAndDates)
        self.MetaUpCal.setStyleSheet("background-color: rgb(255, 255, 255);\n""color: rgb(0, 0, 0);")
        self.MetaUpCal.setObjectName("MetaUpCal")
        self.gridLayout_3.addWidget(self.MetaUpCal, 7, 3, 1, 1)
        self.PubCal = QtWidgets.QCalendarWidget(self.TitlesAndDates)
        self.PubCal.setStyleSheet("background-color: rgb(255, 255, 255);\n""color: rgb(0, 0, 0);\n""")
        self.PubCal.setObjectName("PubCal")
        self.gridLayout_3.addWidget(self.PubCal, 5, 1, 1, 1)
        self.MetaCal = QtWidgets.QCalendarWidget(self.TitlesAndDates)
        self.MetaCal.setStyleSheet("background-color: rgb(255, 255, 255);\n""color: rgb(0, 0, 0);")
        self.MetaCal.setObjectName("MetaCal")
        self.gridLayout_3.addWidget(self.MetaCal, 7, 1, 1, 1)
        self.RefSys = QtWidgets.QLabel(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.RefSys.setFont(font)
        self.RefSys.setStyleSheet("color: rgb(255, 255, 255);")
        self.RefSys.setObjectName("RefSys")
        self.gridLayout_3.addWidget(self.RefSys, 0, 4, 1, 1)
        self.ScopeLab = QtWidgets.QLabel(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.ScopeLab.setFont(font)
        self.ScopeLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.ScopeLab.setObjectName("ScopeLab")
        self.gridLayout_3.addWidget(self.ScopeLab, 1, 4, 1, 1)
        self.MetaUpFreqCombo = QtWidgets.QComboBox(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaUpFreqCombo.setFont(font)
        self.MetaUpFreqCombo.setStyleSheet("background-color: rgb(255, 255, 255);\n""color: rgb(0, 0, 0);")
        self.MetaUpFreqCombo.setObjectName("MetaUpFreqCombo")
        self.MetaUpFreqCombo.addItem("")
        self.MetaUpFreqCombo.addItem("")
        self.MetaUpFreqCombo.addItem("")
        self.MetaUpFreqCombo.addItem("")
        self.MetaUpFreqCombo.addItem("")
        self.MetaUpFreqCombo.addItem("")
        self.MetaUpFreqCombo.addItem("")
        self.MetaUpFreqCombo.addItem("")
        self.MetaUpFreqCombo.addItem("")
        self.MetaUpFreqCombo.addItem("")
        self.MetaUpFreqCombo.addItem("")
        self.MetaUpFreqCombo.addItem("")
        self.MetaUpFreqCombo.addItem("")
        self.gridLayout_3.addWidget(self.MetaUpFreqCombo, 3, 5, 1, 1)
        self.TpCatLab = QtWidgets.QLabel(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.TpCatLab.setFont(font)
        self.TpCatLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.TpCatLab.setWordWrap(True)
        self.TpCatLab.setObjectName("TpCatLab")
        self.gridLayout_3.addWidget(self.TpCatLab, 2, 0, 1, 1)
        self.StatusCombo = QtWidgets.QComboBox(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.StatusCombo.setFont(font)
        self.StatusCombo.setStyleSheet("background-color: rgb(255, 255, 255);\n""color: rgb(0, 0, 0);")
        self.StatusCombo.setObjectName("StatusCombo")
        self.StatusCombo.addItem("")
        self.StatusCombo.addItem("")
        self.StatusCombo.addItem("")
        self.StatusCombo.addItem("")
        self.StatusCombo.addItem("")
        self.StatusCombo.addItem("")
        self.StatusCombo.addItem("")
        self.StatusCombo.addItem("")
        self.gridLayout_3.addWidget(self.StatusCombo, 2, 5, 1, 1)
        self.DataUpFreqLab = QtWidgets.QLabel(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataUpFreqLab.setFont(font)
        self.DataUpFreqLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.DataUpFreqLab.setObjectName("DataUpFreqLab")
        self.gridLayout_3.addWidget(self.DataUpFreqLab, 3, 0, 1, 1)
        self.alttitlelab = QtWidgets.QLabel(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.alttitlelab.setFont(font)
        self.alttitlelab.setStyleSheet("color: rgb(255, 255, 255);")
        self.alttitlelab.setObjectName("alttitlelab")
        self.gridLayout_3.addWidget(self.alttitlelab, 1, 0, 1, 1)
        self.RefCombo = QtWidgets.QComboBox(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.RefCombo.setFont(font)
        self.RefCombo.setStyleSheet("background-color: rgb(255, 255, 255);\n""color: rgb(0, 0, 0);")
        self.RefCombo.setObjectName("RefCombo")
        self.RefCombo.addItem("")
        self.RefCombo.addItem("")
        self.RefCombo.addItem("")
        self.RefCombo.addItem("")
        self.gridLayout_3.addWidget(self.RefCombo, 0, 5, 1, 1)
        self.titlelab = QtWidgets.QLabel(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.titlelab.setFont(font)
        self.titlelab.setStyleSheet("color: rgb(255, 0, 0);")
        self.titlelab.setObjectName("titlelab")
        self.gridLayout_3.addWidget(self.titlelab, 0, 0, 1, 1)
        self.DataUpOnLab = QtWidgets.QLabel(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataUpOnLab.setFont(font)
        self.DataUpOnLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.DataUpOnLab.setObjectName("DataUpOnLab")
        self.gridLayout_3.addWidget(self.DataUpOnLab, 4, 3, 1, 1)
        self.TempStartLab = QtWidgets.QLabel(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.TempStartLab.setFont(font)
        self.TempStartLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.TempStartLab.setObjectName("TempStartLab")
        self.gridLayout_3.addWidget(self.TempStartLab, 4, 5, 1, 1, QtCore.Qt.AlignHCenter)
        self.MetaUpLab = QtWidgets.QLabel(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaUpLab.setFont(font)
        self.MetaUpLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.MetaUpLab.setObjectName("MetaUpLab")
        self.gridLayout_3.addWidget(self.MetaUpLab, 6, 3, 1, 1, QtCore.Qt.AlignHCenter)
        self.PubdateLab = QtWidgets.QLabel(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.PubdateLab.setFont(font)
        self.PubdateLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.PubdateLab.setObjectName("PubdateLab")
        self.gridLayout_3.addWidget(self.PubdateLab, 4, 1, 1, 1, QtCore.Qt.AlignHCenter)
        self.DataUpCal = QtWidgets.QCalendarWidget(self.TitlesAndDates)
        self.DataUpCal.setStyleSheet("background-color: rgb(255, 255, 255);\n""color: rgb(0, 0, 0);")
        self.DataUpCal.setObjectName("DataUpCal")
        self.gridLayout_3.addWidget(self.DataUpCal, 5, 3, 1, 1)
        self.ScopeCombo = QtWidgets.QComboBox(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.ScopeCombo.setFont(font)
        self.ScopeCombo.setStyleSheet("background-color: rgb(255, 255, 255);\n""color: rgb(0, 0, 0);")
        self.ScopeCombo.setObjectName("ScopeCombo")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.ScopeCombo.addItem("")
        self.gridLayout_3.addWidget(self.ScopeCombo, 1, 5, 1, 1)
        self.TempEndCal = QtWidgets.QCalendarWidget(self.TitlesAndDates)
        self.TempEndCal.setStyleSheet("background-color: rgb(255, 255, 255);\n""color: rgb(0, 0, 0);")
        self.TempEndCal.setObjectName("TempEndCal")
        self.gridLayout_3.addWidget(self.TempEndCal, 7, 5, 1, 1)
        self.TempEndLab = QtWidgets.QLabel(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.TempEndLab.setFont(font)
        self.TempEndLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.TempEndLab.setObjectName("TempEndLab")
        self.gridLayout_3.addWidget(self.TempEndLab, 6, 5, 1, 1, QtCore.Qt.AlignHCenter)
        self.TitleBox = QtWidgets.QLineEdit(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.TitleBox.setFont(font)
        self.TitleBox.setStyleSheet("background-color: rgb(255, 255, 255);\n""color: rgb(0, 0, 0);")
        self.TitleBox.setObjectName("TitleBox")
        self.gridLayout_3.addWidget(self.TitleBox, 0, 1, 1, 1)
        self.DataUpFreqCombo = QtWidgets.QComboBox(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataUpFreqCombo.setFont(font)
        self.DataUpFreqCombo.setStyleSheet("background-color: rgb(255, 255, 255);\n""color: rgb(0, 0, 0);")
        self.DataUpFreqCombo.setObjectName("DataUpFreqCombo")
        self.DataUpFreqCombo.addItem("")
        self.DataUpFreqCombo.addItem("")
        self.DataUpFreqCombo.addItem("")
        self.DataUpFreqCombo.addItem("")
        self.DataUpFreqCombo.addItem("")
        self.DataUpFreqCombo.addItem("")
        self.DataUpFreqCombo.addItem("")
        self.DataUpFreqCombo.addItem("")
        self.DataUpFreqCombo.addItem("")
        self.DataUpFreqCombo.addItem("")
        self.DataUpFreqCombo.addItem("")
        self.DataUpFreqCombo.addItem("")
        self.DataUpFreqCombo.addItem("")
        self.gridLayout_3.addWidget(self.DataUpFreqCombo, 3, 1, 1, 1)
        self.TpCatCombo = QtWidgets.QComboBox(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.TpCatCombo.setFont(font)
        self.TpCatCombo.setStyleSheet("background-color: rgb(255, 255, 255);\n""color: rgb(0, 0, 0);")
        self.TpCatCombo.setObjectName("TpCatCombo")
        self.TpCatCombo.addItem("")
        self.TpCatCombo.addItem("")
        self.TpCatCombo.addItem("")
        self.TpCatCombo.addItem("")
        self.TpCatCombo.addItem("")
        self.TpCatCombo.addItem("")
        self.TpCatCombo.addItem("")
        self.TpCatCombo.addItem("")
        self.TpCatCombo.addItem("")
        self.TpCatCombo.addItem("")
        self.TpCatCombo.addItem("")
        self.TpCatCombo.addItem("")
        self.TpCatCombo.addItem("")
        self.TpCatCombo.addItem("")
        self.TpCatCombo.addItem("")
        self.TpCatCombo.addItem("")
        self.TpCatCombo.addItem("")
        self.TpCatCombo.addItem("")
        self.TpCatCombo.addItem("")
        self.gridLayout_3.addWidget(self.TpCatCombo, 2, 1, 1, 1)
        self.alt_titlebox = QtWidgets.QLineEdit(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.alt_titlebox.setFont(font)
        self.alt_titlebox.setStyleSheet("background-color: rgb(255, 255, 255);\n""color: rgb(0, 0, 0);")
        self.alt_titlebox.setObjectName("alt_titlebox")
        self.gridLayout_3.addWidget(self.alt_titlebox, 1, 1, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem, 0, 3, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem1, 1, 3, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem2, 2, 3, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem3, 3, 3, 1, 1)
        self.MetaLab = QtWidgets.QLabel(self.TitlesAndDates)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaLab.setFont(font)
        self.MetaLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.MetaLab.setObjectName("MetaLab")
        self.gridLayout_3.addWidget(self.MetaLab, 6, 1, 1, 1)
        self.TabController.addTab(self.TitlesAndDates, "")
        self.DatasetDescription = QtWidgets.QWidget()
        self.DatasetDescription.setStyleSheet("background-color: rgb(0, 0, 127);")
        self.DatasetDescription.setObjectName("DatasetDescription")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.DatasetDescription)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.SourceDescBox = QtWidgets.QTextEdit(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.SourceDescBox.setFont(font)
        self.SourceDescBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.SourceDescBox.setObjectName("SourceDescBox")
        self.gridLayout_4.addWidget(self.SourceDescBox, 7, 1, 1, 1)
        self.CredBox = QtWidgets.QTextEdit(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.CredBox.setFont(font)
        self.CredBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.CredBox.setObjectName("CredBox")
        self.gridLayout_4.addWidget(self.CredBox, 2, 1, 1, 1)
        self.LinBox = QtWidgets.QTextEdit(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.LinBox.setFont(font)
        self.LinBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.LinBox.setObjectName("LinBox")
        self.gridLayout_4.addWidget(self.LinBox, 5, 1, 1, 1)
        self.MaintNoteBox = QtWidgets.QTextEdit(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MaintNoteBox.setFont(font)
        self.MaintNoteBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.MaintNoteBox.setObjectName("MaintNoteBox")
        self.gridLayout_4.addWidget(self.MaintNoteBox, 8, 1, 1, 1)
        self.ProcessBox = QtWidgets.QTextEdit(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.ProcessBox.setFont(font)
        self.ProcessBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.ProcessBox.setObjectName("ProcessBox")
        self.gridLayout_4.addWidget(self.ProcessBox, 6, 1, 1, 1)
        self.AbstractLab = QtWidgets.QLabel(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.AbstractLab.setFont(font)
        self.AbstractLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.AbstractLab.setObjectName("AbstractLab")
        self.gridLayout_4.addWidget(self.AbstractLab, 0, 0, 1, 1)
        self.KaywordBox = QtWidgets.QTextEdit(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.KaywordBox.setFont(font)
        self.KaywordBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.KaywordBox.setObjectName("KaywordBox")
        self.gridLayout_4.addWidget(self.KaywordBox, 3, 1, 1, 1)
        self.PurposeBox = QtWidgets.QTextEdit(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.PurposeBox.setFont(font)
        self.PurposeBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.PurposeBox.setObjectName("PurposeBox")
        self.gridLayout_4.addWidget(self.PurposeBox, 1, 1, 1, 1)
        self.UseConBox = QtWidgets.QTextEdit(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.UseConBox.setFont(font)
        self.UseConBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.UseConBox.setObjectName("UseConBox")
        self.gridLayout_4.addWidget(self.UseConBox, 4, 1, 1, 1)
        self.OnlineLinkBox = QtWidgets.QTextEdit(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.OnlineLinkBox.setFont(font)
        self.OnlineLinkBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.OnlineLinkBox.setObjectName("OnlineLinkBox")
        self.gridLayout_4.addWidget(self.OnlineLinkBox, 9, 1, 1, 1)
        self.MaintNoteLab = QtWidgets.QLabel(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MaintNoteLab.setFont(font)
        self.MaintNoteLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.MaintNoteLab.setObjectName("MaintNoteLab")
        self.gridLayout_4.addWidget(self.MaintNoteLab, 8, 0, 1, 1)
        self.PurposeLab = QtWidgets.QLabel(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.PurposeLab.setFont(font)
        self.PurposeLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.PurposeLab.setObjectName("PurposeLab")
        self.gridLayout_4.addWidget(self.PurposeLab, 1, 0, 1, 1)
        self.ProcessLab = QtWidgets.QLabel(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.ProcessLab.setFont(font)
        self.ProcessLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.ProcessLab.setObjectName("ProcessLab")
        self.gridLayout_4.addWidget(self.ProcessLab, 6, 0, 1, 1)
        self.OnlineLinkLab = QtWidgets.QLabel(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.OnlineLinkLab.setFont(font)
        self.OnlineLinkLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.OnlineLinkLab.setObjectName("OnlineLinkLab")
        self.gridLayout_4.addWidget(self.OnlineLinkLab, 9, 0, 1, 1)
        self.CredLab = QtWidgets.QLabel(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.CredLab.setFont(font)
        self.CredLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.CredLab.setObjectName("CredLab")
        self.gridLayout_4.addWidget(self.CredLab, 2, 0, 1, 1)
        self.LinLab = QtWidgets.QLabel(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.LinLab.setFont(font)
        self.LinLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.LinLab.setObjectName("LinLab")
        self.gridLayout_4.addWidget(self.LinLab, 5, 0, 1, 1)
        self.KeywordLab = QtWidgets.QLabel(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.KeywordLab.setFont(font)
        self.KeywordLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.KeywordLab.setObjectName("KeywordLab")
        self.gridLayout_4.addWidget(self.KeywordLab, 3, 0, 1, 1)
        self.UseConLab = QtWidgets.QLabel(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.UseConLab.setFont(font)
        self.UseConLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.UseConLab.setObjectName("UseConLab")
        self.gridLayout_4.addWidget(self.UseConLab, 4, 0, 1, 1)
        self.SourceDescLab = QtWidgets.QLabel(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.SourceDescLab.setFont(font)
        self.SourceDescLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.SourceDescLab.setObjectName("SourceDescLab")
        self.gridLayout_4.addWidget(self.SourceDescLab, 7, 0, 1, 1)
        self.AbBox = QtWidgets.QTextEdit(self.DatasetDescription)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.AbBox.setFont(font)
        self.AbBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.AbBox.setObjectName("AbBox")
        self.gridLayout_4.addWidget(self.AbBox, 0, 1, 1, 1)
        self.TabController.addTab(self.DatasetDescription, "")
        self.DataContactInformation = QtWidgets.QWidget()
        self.DataContactInformation.setStyleSheet("background-color: rgb(0, 0, 127);")
        self.DataContactInformation.setObjectName("DataContactInformation")
        self.gridLayoutWidget_2 = QtWidgets.QWidget(self.DataContactInformation)
        self.gridLayoutWidget_2.setGeometry(QtCore.QRect(10, 0, 1181, 291))
        self.gridLayoutWidget_2.setObjectName("gridLayoutWidget_2")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.gridLayoutWidget_2)
        self.gridLayout_5.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.DataRoleCombo = QtWidgets.QComboBox(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataRoleCombo.setFont(font)
        self.DataRoleCombo.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.DataRoleCombo.setObjectName("DataRoleCombo")
        self.DataRoleCombo.addItem("")
        self.DataRoleCombo.addItem("")
        self.DataRoleCombo.addItem("")
        self.DataRoleCombo.addItem("")
        self.DataRoleCombo.addItem("")
        self.DataRoleCombo.addItem("")
        self.DataRoleCombo.addItem("")
        self.DataRoleCombo.addItem("")
        self.DataRoleCombo.addItem("")
        self.DataRoleCombo.addItem("")
        self.DataRoleCombo.addItem("")
        self.DataRoleCombo.addItem("")
        self.DataRoleCombo.addItem("")
        self.DataRoleCombo.addItem("")
        self.DataRoleCombo.addItem("")
        self.gridLayout_5.addWidget(self.DataRoleCombo, 0, 1, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem4, 5, 4, 1, 1)
        self.MetaPosLab = QtWidgets.QLabel(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaPosLab.setFont(font)
        self.MetaPosLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.MetaPosLab.setObjectName("MetaPosLab")
        self.gridLayout_5.addWidget(self.MetaPosLab, 2, 0, 1, 1, QtCore.Qt.AlignHCenter)
        self.DataCitBox = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataCitBox.setFont(font)
        self.DataCitBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.DataCitBox.setObjectName("DataCitBox")
        self.gridLayout_5.addWidget(self.DataCitBox, 1, 4, 1, 1)
        self.DataZipBox = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataZipBox.setFont(font)
        self.DataZipBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.DataZipBox.setObjectName("DataZipBox")
        self.gridLayout_5.addWidget(self.DataZipBox, 3, 4, 1, 1)
        self.DataNameLab = QtWidgets.QLabel(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataNameLab.setFont(font)
        self.DataNameLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.DataNameLab.setObjectName("DataNameLab")
        self.gridLayout_5.addWidget(self.DataNameLab, 1, 0, 1, 1)
        self.DataFaxBox = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataFaxBox.setFont(font)
        self.DataFaxBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.DataFaxBox.setObjectName("DataFaxBox")
        self.gridLayout_5.addWidget(self.DataFaxBox, 5, 1, 1, 1)
        self.DataFaxLab = QtWidgets.QLabel(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataFaxLab.setFont(font)
        self.DataFaxLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.DataFaxLab.setObjectName("DataFaxLab")
        self.gridLayout_5.addWidget(self.DataFaxLab, 5, 0, 1, 1)
        self.DataPhoneBox = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataPhoneBox.setFont(font)
        self.DataPhoneBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.DataPhoneBox.setObjectName("DataPhoneBox")
        self.gridLayout_5.addWidget(self.DataPhoneBox, 4, 1, 1, 1)
        self.DataRoleLab = QtWidgets.QLabel(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataRoleLab.setFont(font)
        self.DataRoleLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.DataRoleLab.setObjectName("DataRoleLab")
        self.gridLayout_5.addWidget(self.DataRoleLab, 0, 0, 1, 1)
        self.DataEmailLab = QtWidgets.QLabel(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataEmailLab.setFont(font)
        self.DataEmailLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.DataEmailLab.setObjectName("DataEmailLab")
        self.gridLayout_5.addWidget(self.DataEmailLab, 3, 0, 1, 1)
        self.DataWebLab = QtWidgets.QLabel(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataWebLab.setFont(font)
        self.DataWebLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.DataWebLab.setObjectName("DataWebLab")
        self.gridLayout_5.addWidget(self.DataWebLab, 4, 3, 1, 1)
        self.DataLabBox = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataLabBox.setFont(font)
        self.DataLabBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.DataLabBox.setObjectName("DataLabBox")
        self.gridLayout_5.addWidget(self.DataLabBox, 4, 4, 1, 1)
        self.DataStateLab = QtWidgets.QLabel(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataStateLab.setFont(font)
        self.DataStateLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.DataStateLab.setObjectName("DataStateLab")
        self.gridLayout_5.addWidget(self.DataStateLab, 2, 3, 1, 1)
        self.DataSABox = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataSABox.setFont(font)
        self.DataSABox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.DataSABox.setObjectName("DataSABox")
        self.gridLayout_5.addWidget(self.DataSABox, 0, 4, 1, 1)
        self.DataPhoneLab = QtWidgets.QLabel(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataPhoneLab.setFont(font)
        self.DataPhoneLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.DataPhoneLab.setObjectName("DataPhoneLab")
        self.gridLayout_5.addWidget(self.DataPhoneLab, 4, 0, 1, 1)
        self.DataZipLab = QtWidgets.QLabel(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataZipLab.setFont(font)
        self.DataZipLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.DataZipLab.setObjectName("DataZipLab")
        self.gridLayout_5.addWidget(self.DataZipLab, 3, 3, 1, 1)
        self.DataSALab = QtWidgets.QLabel(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataSALab.setFont(font)
        self.DataSALab.setStyleSheet("color: rgb(255, 255, 255);")
        self.DataSALab.setObjectName("DataSALab")
        self.gridLayout_5.addWidget(self.DataSALab, 0, 3, 1, 1)
        self.DataNameBox = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataNameBox.setFont(font)
        self.DataNameBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.DataNameBox.setObjectName("DataNameBox")
        self.gridLayout_5.addWidget(self.DataNameBox, 1, 1, 1, 1)
        self.DataPosBox = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataPosBox.setFont(font)
        self.DataPosBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.DataPosBox.setObjectName("DataPosBox")
        self.gridLayout_5.addWidget(self.DataPosBox, 2, 1, 1, 1)
        self.DataCitLab = QtWidgets.QLabel(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataCitLab.setFont(font)
        self.DataCitLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.DataCitLab.setObjectName("DataCitLab")
        self.gridLayout_5.addWidget(self.DataCitLab, 1, 3, 1, 1)
        self.DataEmailBox = QtWidgets.QLineEdit(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataEmailBox.setFont(font)
        self.DataEmailBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.DataEmailBox.setObjectName("DataEmailBox")
        self.gridLayout_5.addWidget(self.DataEmailBox, 3, 1, 1, 1)
        self.DataStateCombo = QtWidgets.QComboBox(self.gridLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataStateCombo.setFont(font)
        self.DataStateCombo.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.DataStateCombo.setObjectName("DataStateCombo")
        self.DataStateCombo.addItem("")
        self.gridLayout_5.addWidget(self.DataStateCombo, 2, 4, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem5, 2, 2, 1, 1)
        self.gridLayoutWidget_3 = QtWidgets.QWidget(self.DataContactInformation)
        self.gridLayoutWidget_3.setGeometry(QtCore.QRect(9, 289, 1181, 471))
        self.gridLayoutWidget_3.setObjectName("gridLayoutWidget_3")
        self.gridLayout_9 = QtWidgets.QGridLayout(self.gridLayoutWidget_3)
        self.gridLayout_9.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.DataHOSLab = QtWidgets.QLabel(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataHOSLab.setFont(font)
        self.DataHOSLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.DataHOSLab.setObjectName("DataHOSLab")
        self.gridLayout_9.addWidget(self.DataHOSLab, 0, 0, 1, 1, QtCore.Qt.AlignHCenter)
        self.DataCILab = QtWidgets.QLabel(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataCILab.setFont(font)
        self.DataCILab.setStyleSheet("color: rgb(255, 255, 255);")
        self.DataCILab.setObjectName("DataCILab")
        self.gridLayout_9.addWidget(self.DataCILab, 1, 0, 1, 1)
        self.DataHOSBox = QtWidgets.QTextEdit(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataHOSBox.setFont(font)
        self.DataHOSBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.DataHOSBox.setObjectName("DataHOSBox")
        self.gridLayout_9.addWidget(self.DataHOSBox, 0, 1, 1, 1)
        self.DataCIBox = QtWidgets.QTextEdit(self.gridLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.DataCIBox.setFont(font)
        self.DataCIBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.DataCIBox.setObjectName("DataCIBox")
        self.gridLayout_9.addWidget(self.DataCIBox, 1, 1, 1, 1)
        self.TabController.addTab(self.DataContactInformation, "")
        self.MetdataContactInformation = QtWidgets.QWidget()
        self.MetdataContactInformation.setStyleSheet("background-color: rgb(0, 0, 127);")
        self.MetdataContactInformation.setObjectName("MetdataContactInformation")
        self.gridLayoutWidget = QtWidgets.QWidget(self.MetdataContactInformation)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 290, 1171, 481))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout_7.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.MetaCILab = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaCILab.setFont(font)
        self.MetaCILab.setStyleSheet("color: rgb(255, 255, 255);")
        self.MetaCILab.setObjectName("MetaCILab")
        self.gridLayout_7.addWidget(self.MetaCILab, 1, 0, 1, 1)
        self.MetaHOSLab = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaHOSLab.setFont(font)
        self.MetaHOSLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.MetaHOSLab.setObjectName("MetaHOSLab")
        self.gridLayout_7.addWidget(self.MetaHOSLab, 0, 0, 1, 1, QtCore.Qt.AlignHCenter)
        self.MetaCIBox = QtWidgets.QTextEdit(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaCIBox.setFont(font)
        self.MetaCIBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.MetaCIBox.setObjectName("MetaCIBox")
        self.gridLayout_7.addWidget(self.MetaCIBox, 1, 1, 1, 1)
        self.MetaHOSBox = QtWidgets.QTextEdit(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaHOSBox.setFont(font)
        self.MetaHOSBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.MetaHOSBox.setObjectName("MetaHOSBox")
        self.gridLayout_7.addWidget(self.MetaHOSBox, 0, 1, 1, 1)
        self.layoutWidget = QtWidgets.QWidget(self.MetdataContactInformation)
        self.layoutWidget.setGeometry(QtCore.QRect(7, 6, 1171, 281))
        self.layoutWidget.setObjectName("layoutWidget")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.layoutWidget)
        self.gridLayout_6.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_6.setObjectName("gridLayout_6")
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_6.addItem(spacerItem6, 0, 2, 1, 1)
        self.MetaPhoneLab = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaPhoneLab.setFont(font)
        self.MetaPhoneLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.MetaPhoneLab.setObjectName("MetaPhoneLab")
        self.gridLayout_6.addWidget(self.MetaPhoneLab, 4, 0, 1, 1)
        self.MetaNameLab = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaNameLab.setFont(font)
        self.MetaNameLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.MetaNameLab.setObjectName("MetaNameLab")
        self.gridLayout_6.addWidget(self.MetaNameLab, 1, 0, 1, 1)
        self.MetaPosBox = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaPosBox.setFont(font)
        self.MetaPosBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.MetaPosBox.setObjectName("MetaPosBox")
        self.gridLayout_6.addWidget(self.MetaPosBox, 2, 1, 1, 1)
        self.MetaWebLab = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaWebLab.setFont(font)
        self.MetaWebLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.MetaWebLab.setObjectName("MetaWebLab")
        self.gridLayout_6.addWidget(self.MetaWebLab, 4, 3, 1, 1)
        self.MetaStateCombo = QtWidgets.QComboBox(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaStateCombo.setFont(font)
        self.MetaStateCombo.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.MetaStateCombo.setObjectName("MetaStateCombo")
        self.MetaStateCombo.addItem("")
        self.gridLayout_6.addWidget(self.MetaStateCombo, 2, 4, 1, 1)
        self.MetaRoleLab = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaRoleLab.setFont(font)
        self.MetaRoleLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.MetaRoleLab.setObjectName("MetaRoleLab")
        self.gridLayout_6.addWidget(self.MetaRoleLab, 0, 0, 1, 1)
        self.MetaNameBox = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaNameBox.setFont(font)
        self.MetaNameBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.MetaNameBox.setObjectName("MetaNameBox")
        self.gridLayout_6.addWidget(self.MetaNameBox, 1, 1, 1, 1)
        self.MetaEmailBox = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaEmailBox.setFont(font)
        self.MetaEmailBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.MetaEmailBox.setObjectName("MetaEmailBox")
        self.gridLayout_6.addWidget(self.MetaEmailBox, 3, 1, 1, 1)
        self.MetaStateLab = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaStateLab.setFont(font)
        self.MetaStateLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.MetaStateLab.setObjectName("MetaStateLab")
        self.gridLayout_6.addWidget(self.MetaStateLab, 2, 3, 1, 1)
        self.MetaSALab = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaSALab.setFont(font)
        self.MetaSALab.setStyleSheet("color: rgb(255, 255, 255);")
        self.MetaSALab.setObjectName("MetaSALab")
        self.gridLayout_6.addWidget(self.MetaSALab, 0, 3, 1, 1)
        self.MetaCitLab = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaCitLab.setFont(font)
        self.MetaCitLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.MetaCitLab.setObjectName("MetaCitLab")
        self.gridLayout_6.addWidget(self.MetaCitLab, 1, 3, 1, 1)
        self.MetaFaxBox = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaFaxBox.setFont(font)
        self.MetaFaxBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.MetaFaxBox.setObjectName("MetaFaxBox")
        self.gridLayout_6.addWidget(self.MetaFaxBox, 5, 1, 1, 1)
        self.MetaSABox = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaSABox.setFont(font)
        self.MetaSABox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.MetaSABox.setObjectName("MetaSABox")
        self.gridLayout_6.addWidget(self.MetaSABox, 0, 4, 1, 1)
        self.MetaPhoneBox = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaPhoneBox.setFont(font)
        self.MetaPhoneBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.MetaPhoneBox.setObjectName("MetaPhoneBox")
        self.gridLayout_6.addWidget(self.MetaPhoneBox, 4, 1, 1, 1)
        self.MetaPosLab_2 = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaPosLab_2.setFont(font)
        self.MetaPosLab_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.MetaPosLab_2.setObjectName("MetaPosLab_2")
        self.gridLayout_6.addWidget(self.MetaPosLab_2, 2, 0, 1, 1)
        self.MetaEmailLab = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaEmailLab.setFont(font)
        self.MetaEmailLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.MetaEmailLab.setObjectName("MetaEmailLab")
        self.gridLayout_6.addWidget(self.MetaEmailLab, 3, 0, 1, 1)
        self.MetaFaxLab = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaFaxLab.setFont(font)
        self.MetaFaxLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.MetaFaxLab.setObjectName("MetaFaxLab")
        self.gridLayout_6.addWidget(self.MetaFaxLab, 5, 0, 1, 1)
        self.MetaZipLab = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaZipLab.setFont(font)
        self.MetaZipLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.MetaZipLab.setObjectName("MetaZipLab")
        self.gridLayout_6.addWidget(self.MetaZipLab, 3, 3, 1, 1)
        self.MetaWebBox = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaWebBox.setFont(font)
        self.MetaWebBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.MetaWebBox.setObjectName("MetaWebBox")
        self.gridLayout_6.addWidget(self.MetaWebBox, 4, 4, 1, 1)
        self.MetaZipBox = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaZipBox.setFont(font)
        self.MetaZipBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.MetaZipBox.setObjectName("MetaZipBox")
        self.gridLayout_6.addWidget(self.MetaZipBox, 3, 4, 1, 1)
        self.MetaRoleCombo = QtWidgets.QComboBox(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaRoleCombo.setFont(font)
        self.MetaRoleCombo.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.MetaRoleCombo.setObjectName("MetaRoleCombo")
        self.MetaRoleCombo.addItem("")
        self.MetaRoleCombo.addItem("")
        self.MetaRoleCombo.addItem("")
        self.MetaRoleCombo.addItem("")
        self.MetaRoleCombo.addItem("")
        self.MetaRoleCombo.addItem("")
        self.MetaRoleCombo.addItem("")
        self.MetaRoleCombo.addItem("")
        self.MetaRoleCombo.addItem("")
        self.MetaRoleCombo.addItem("")
        self.MetaRoleCombo.addItem("")
        self.MetaRoleCombo.addItem("")
        self.MetaRoleCombo.addItem("")
        self.MetaRoleCombo.addItem("")
        self.MetaRoleCombo.addItem("")
        self.gridLayout_6.addWidget(self.MetaRoleCombo, 0, 1, 1, 1)
        self.MetaCitBox = QtWidgets.QLineEdit(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.MetaCitBox.setFont(font)
        self.MetaCitBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.MetaCitBox.setObjectName("MetaCitBox")
        self.gridLayout_6.addWidget(self.MetaCitBox, 1, 4, 1, 1)
        self.autofill = QtWidgets.QPushButton(self.layoutWidget)
        self.autofill.setStyleSheet("background-color: rgb(147, 147, 147);")
        self.autofill.setObjectName("autofill")
        self.gridLayout_6.addWidget(self.autofill, 5, 4, 1, 1)
        self.TabController.addTab(self.MetdataContactInformation, "")
        self.FieldImport = QtWidgets.QWidget()
        self.FieldImport.setStyleSheet("background-color: rgb(0, 0, 127);")
        self.FieldImport.setObjectName("FieldImport")
        self.tabWidget_2 = QtWidgets.QTabWidget(self.FieldImport)
        self.tabWidget_2.setGeometry(QtCore.QRect(10, 30, 981, 621))
        self.tabWidget_2.setObjectName("tabWidget_2")
        self.PortalLogin = QtWidgets.QWidget()
        self.PortalLogin.setObjectName("PortalLogin")
        self.UsrNameBox = QtWidgets.QLineEdit(self.PortalLogin)
        self.UsrNameBox.setGeometry(QtCore.QRect(90, 30, 321, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.UsrNameBox.setFont(font)
        self.UsrNameBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.UsrNameBox.setObjectName("UsrNameBox")
        self.UsrNamLab = QtWidgets.QLabel(self.PortalLogin)
        self.UsrNamLab.setGeometry(QtCore.QRect(0, 30, 81, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.UsrNamLab.setFont(font)
        self.UsrNamLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.UsrNamLab.setObjectName("UsrNamLab")
        self.PasLab = QtWidgets.QLabel(self.PortalLogin)
        self.PasLab.setGeometry(QtCore.QRect(10, 70, 71, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.PasLab.setFont(font)
        self.PasLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.PasLab.setObjectName("PasLab")
        self.PortalURLLab = QtWidgets.QLabel(self.PortalLogin)
        self.PortalURLLab.setGeometry(QtCore.QRect(10, 100, 81, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.PortalURLLab.setFont(font)
        self.PortalURLLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.PortalURLLab.setObjectName("PortalURLLab")
        self.PasBox = QtWidgets.QLineEdit(self.PortalLogin)
        self.PasBox.setGeometry(QtCore.QRect(90, 70, 321, 20))
        self.PasBox.setEchoMode(QtWidgets.QLineEdit.Password)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.PasBox.setFont(font)
        self.PasBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.PasBox.setObjectName("PasBox")
        self.PortalURLBox = QtWidgets.QLineEdit(self.PortalLogin)
        self.PortalURLBox.setGeometry(QtCore.QRect(90, 100, 321, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.PortalURLBox.setFont(font)
        self.PortalURLBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.PortalURLBox.setObjectName("PortalURLBox")
        self.PortalTestBTN = QtWidgets.QPushButton(self.PortalLogin)
        self.PortalTestBTN.setGeometry(QtCore.QRect(474, 50, 111, 51))
        self.PortalTestBTN.setStyleSheet("background-color: rgb(147, 147, 147);")
        self.PortalTestBTN.setObjectName("PortalTestBTN")
        self.TypeFilLab = QtWidgets.QLabel(self.PortalLogin)
        self.TypeFilLab.setGeometry(QtCore.QRect(620, 40, 51, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.TypeFilLab.setFont(font)
        self.TypeFilLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.TypeFilLab.setObjectName("TypeFilLab")
        self.TypeComboSel = QtWidgets.QComboBox(self.PortalLogin)
        self.TypeComboSel.setGeometry(QtCore.QRect(680, 60, 261, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.TypeComboSel.setFont(font)
        self.TypeComboSel.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.TypeComboSel.setObjectName("TypeComboSel")
        self.TypeComboSel.addItem("")
        self.TypeComboSel.addItem("")
        self.TypeComboSel.addItem("")
        self.TypeComboSel.addItem("")
        self.TypeComboSel.addItem("")
        self.TypeComboSel.addItem("")
        self.TypeComboSel.addItem("")
        self.TypeComboSel.addItem("")
        self.TypeComboSel.addItem("")
        self.TypeComboSel.addItem("")
        self.TypeComboSel.addItem("")
        self.TypeComboSel.addItem("")
        self.TypeComboSel.addItem("")
        self.ItemTable = QtWidgets.QTableWidget(self.PortalLogin)
        self.ItemTable.setGeometry(QtCore.QRect(20, 130, 951, 461))
        self.ItemTable.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.ItemTable.setObjectName("ItemTable")
        self.ItemTable.setColumnCount(0)
        self.ItemTable.setRowCount(0)
        self.tabWidget_2.addTab(self.PortalLogin, "")
        self.FieldInformation = QtWidgets.QWidget()
        self.FieldInformation.setObjectName("FieldInformation")
        self.CurFieldInfo = QtWidgets.QLabel(self.FieldInformation)
        self.CurFieldInfo.setGeometry(QtCore.QRect(120, 20, 191, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.CurFieldInfo.setFont(font)
        self.CurFieldInfo.setStyleSheet("color: rgb(255, 255, 255);")
        self.CurFieldInfo.setObjectName("CurFieldInfo")
        self.LayerSelectCombo = QtWidgets.QComboBox(self.FieldInformation)
        self.LayerSelectCombo.setGeometry(QtCore.QRect(350, 20, 341, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.LayerSelectCombo.setFont(font)
        self.LayerSelectCombo.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.LayerSelectCombo.setObjectName("LayerSelectCombo")
        self.ImportBTN = QtWidgets.QPushButton(self.FieldInformation)
        self.ImportBTN.setGeometry(QtCore.QRect(730, 20, 181, 31))
        self.ImportBTN.setStyleSheet("background-color: rgb(147, 147, 147);")
        self.ImportBTN.setObjectName("ImportBTN")
        self.FieldInfoTable = QtWidgets.QTableWidget(self.FieldInformation)
        self.FieldInfoTable.setGeometry(QtCore.QRect(10, 60, 951, 531))
        self.FieldInfoTable.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.FieldInfoTable.setObjectName("FieldInfoTable")
        self.FieldInfoTable.setColumnCount(0)
        self.FieldInfoTable.setRowCount(0)
        self.tabWidget_2.addTab(self.FieldInformation, "")
        self.DomainInformation = QtWidgets.QWidget()
        self.DomainInformation.setObjectName("DomainInformation")
        self.FieldSelLab = QtWidgets.QLabel(self.DomainInformation)
        self.FieldSelLab.setGeometry(QtCore.QRect(150, 20, 151, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.FieldSelLab.setFont(font)
        self.FieldSelLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.FieldSelLab.setObjectName("FieldSelLab")
        self.DomainRefBTN = QtWidgets.QPushButton(self.DomainInformation)
        self.DomainRefBTN.setGeometry(QtCore.QRect(710, 10, 181, 31))
        self.DomainRefBTN.setStyleSheet("background-color: rgb(147, 147, 147);")
        self.DomainRefBTN.setObjectName("DomainRefBTN")
        self.DomainTableInfo = QtWidgets.QTableWidget(self.DomainInformation)
        self.DomainTableInfo.setGeometry(QtCore.QRect(10, 50, 951, 531))
        self.DomainTableInfo.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.DomainTableInfo.setObjectName("DomainTableInfo")
        self.DomainTableInfo.setColumnCount(0)
        self.DomainTableInfo.setRowCount(0)
        self.FieldSelCombo = QtWidgets.QComboBox(self.DomainInformation)
        self.FieldSelCombo.setGeometry(QtCore.QRect(350, 20, 341, 22))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.FieldSelCombo.setFont(font)
        self.FieldSelCombo.setStyleSheet("background-color: rgb(255, 255, 255);\n""color: rgb(0, 0, 0);")
        self.FieldSelCombo.setObjectName("FieldSelCombo")
        self.tabWidget_2.addTab(self.DomainInformation, "")
        self.XMLOutLab = QtWidgets.QLabel(self.FieldImport)
        self.XMLOutLab.setGeometry(QtCore.QRect(50, 660, 47, 71))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.XMLOutLab.setFont(font)
        self.XMLOutLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.XMLOutLab.setObjectName("XMLOutLab")
        self.XMLOutBox = QtWidgets.QLineEdit(self.FieldImport)
        self.XMLOutBox.setGeometry(QtCore.QRect(120, 690, 551, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.XMLOutBox.setFont(font)
        self.XMLOutBox.setStyleSheet("background-color: rgb(255, 255, 255);\n""color: rgb(0, 0, 0);")
        self.XMLOutBox.setObjectName("XMLOutBox")
        self.BrowseFol = QtWidgets.QPushButton(self.FieldImport)
        self.BrowseFol.setGeometry(QtCore.QRect(700, 690, 81, 23))
        self.BrowseFol.setStyleSheet("background-color: rgb(147, 147, 147);")
        self.BrowseFol.setObjectName("BrowseFol")
        self.RunBTN = QtWidgets.QPushButton(self.FieldImport)
        self.RunBTN.setGeometry(QtCore.QRect(830, 660, 151, 81))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.RunBTN.setFont(font)
        self.RunBTN.setStyleSheet("background-color: rgb(147, 147, 147);")
        self.RunBTN.setObjectName("RunBTN")
        self.TabController.addTab(self.FieldImport, "")
        self.XMLImport = QtWidgets.QWidget()
        self.XMLImport.setStyleSheet("background-color: rgb(0, 0, 127);")
        self.XMLImport.setObjectName("XMLImport")
        self.XMLLab = QtWidgets.QLabel(self.XMLImport)
        self.XMLLab.setGeometry(QtCore.QRect(120, 170, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.XMLLab.setFont(font)
        self.XMLLab.setStyleSheet("color: rgb(255, 255, 255);")
        self.XMLLab.setObjectName("XMLLab")
        self.XMLInBox = QtWidgets.QLineEdit(self.XMLImport)
        self.XMLInBox.setGeometry(QtCore.QRect(210, 170, 631, 20))
        self.XMLInBox.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.XMLInBox.setObjectName("XMLInBox")
        self.XMLBrowseBTN = QtWidgets.QPushButton(self.XMLImport)
        self.XMLBrowseBTN.setGeometry(QtCore.QRect(880, 170, 75, 23))
        self.XMLBrowseBTN.setStyleSheet("background-color: rgb(147, 147, 147);")
        self.XMLBrowseBTN.setObjectName("XMLBrowseBTN")
        self.XMLImportBTN = QtWidgets.QPushButton(self.XMLImport)
        self.XMLImportBTN.setGeometry(QtCore.QRect(360, 320, 271, 81))
        self.XMLImportBTN.setStyleSheet("background-color: rgb(147, 147, 147);")
        self.XMLImportBTN.setObjectName("XMLImportBTN")
        self.TabController.addTab(self.XMLImport, "")
        self.gridLayout_2.addWidget(self.TabController, 0, 1, 1, 1)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.gridLayout.addWidget(self.scrollArea, 0, 0, 1, 1)
        MyMeta.setCentralWidget(self.MyMetaWindow)
        self.menubar = QtWidgets.QMenuBar(MyMeta)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1320, 21))
        self.menubar.setObjectName("menubar")
        MyMeta.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MyMeta)
        self.statusbar.setObjectName("statusbar")
        MyMeta.setStatusBar(self.statusbar)

        self.retranslateUi(MyMeta)
        self.TabController.setCurrentIndex(0)
        self.tabWidget_2.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MyMeta)

        #--------------------init buttons
        self.autofill.clicked.connect(self.autopopulate)
        self.DomainRefBTN.clicked.connect(self.domain_btn)
        self.ImportBTN.clicked.connect(self.fieldlist)
        self.PortalTestBTN.clicked.connect(self.TestConnection)
        self.BrowseFol.clicked.connect(self.browse_folder)
        self.XMLBrowseBTN.clicked.connect(self.browse_xml)
        self.RunBTN.clicked.connect(self.ConvertToXML)
        self.XMLImportBTN.clicked.connect(self.importXML)


    def retranslateUi(self, MyMeta):
        _translate = QtCore.QCoreApplication.translate
        MyMeta.setWindowTitle(_translate("MyMeta", "MyMeta"))
        self.StatusLab.setText(_translate("MyMeta", "Status"))
        self.MetaUpFreqLab.setText(_translate("MyMeta", "Metadata \n""Update \n""Frequency"))
        self.RefSys.setText(_translate("MyMeta", "Reference\n""  System"))
        self.ScopeLab.setText(_translate("MyMeta", "Scope\n""Level"))
        self.MetaUpFreqCombo.setItemText(0, _translate("MyMeta", "Continual"))
        self.MetaUpFreqCombo.setItemText(1, _translate("MyMeta", "Daily"))
        self.MetaUpFreqCombo.setItemText(2, _translate("MyMeta", "Weekly"))
        self.MetaUpFreqCombo.setItemText(3, _translate("MyMeta", "Fornightly"))
        self.MetaUpFreqCombo.setItemText(4, _translate("MyMeta", "Monthly"))
        self.MetaUpFreqCombo.setItemText(5, _translate("MyMeta", "Quarterly"))
        self.MetaUpFreqCombo.setItemText(6, _translate("MyMeta", "Biannually"))
        self.MetaUpFreqCombo.setItemText(7, _translate("MyMeta", "Annually"))
        self.MetaUpFreqCombo.setItemText(8, _translate("MyMeta", "As-Needed"))
        self.MetaUpFreqCombo.setItemText(9, _translate("MyMeta", "Irregular"))
        self.MetaUpFreqCombo.setItemText(10, _translate("MyMeta", "Not-Planned"))
        self.MetaUpFreqCombo.setItemText(11, _translate("MyMeta", "Unknown"))
        self.MetaUpFreqCombo.setItemText(12, _translate("MyMeta", "Semi-Monthly"))
        self.TpCatLab.setText(_translate("MyMeta", "Topic \n""Categroy"))
        self.StatusCombo.setItemText(0, _translate("MyMeta", "Completed"))
        self.StatusCombo.setItemText(1, _translate("MyMeta", "Historical Archive"))
        self.StatusCombo.setItemText(2, _translate("MyMeta", "Obsolete"))
        self.StatusCombo.setItemText(3, _translate("MyMeta", "On-Going"))
        self.StatusCombo.setItemText(4, _translate("MyMeta", "Planned"))
        self.StatusCombo.setItemText(5, _translate("MyMeta", "Required"))
        self.StatusCombo.setItemText(6, _translate("MyMeta", "Under Development"))
        self.StatusCombo.setItemText(7, _translate("MyMeta", "Proposed"))
        self.DataUpFreqLab.setText(_translate("MyMeta", "Data\n""Update\n""Frequency"))
        self.alttitlelab.setText(_translate("MyMeta", "Alt Title"))
        self.RefCombo.setItemText(0, _translate("MyMeta", "ESPG: 3857 - Pseudo Web Mercator"))
        self.RefCombo.setItemText(1, _translate("MyMeta", "ESPG: 2234 - NAD83/Connecticut (ftUS)"))
        self.RefCombo.setItemText(2, _translate("MyMeta", "ESPG: 4326 - WGS84-World Geodetic System 1984"))
        self.RefCombo.setItemText(3, _translate("MyMeta", "ESPG: 6434 - NAD83(2011) / Connecticut (ftUS)"))
        self.titlelab.setText(_translate("MyMeta", "     Title\n""(*Required*)"))
        self.DataUpOnLab.setText(_translate("MyMeta", "<html><head/><body><p align=\"center\">Next Data Update</p></body></html>"))
        self.TempStartLab.setText(_translate("MyMeta", "Temporal Extent Start Date"))
        self.MetaUpLab.setText(_translate("MyMeta", "Next Metadata Update"))
        self.PubdateLab.setText(_translate("MyMeta", "Publication Date"))
        self.ScopeCombo.setItemText(0, _translate("MyMeta", "Attribute Type"))
        self.ScopeCombo.setItemText(1, _translate("MyMeta", "Attribute"))
        self.ScopeCombo.setItemText(2, _translate("MyMeta", "Collection Hardware"))
        self.ScopeCombo.setItemText(3, _translate("MyMeta", "Collection Series"))
        self.ScopeCombo.setItemText(4, _translate("MyMeta", "Dataset"))
        self.ScopeCombo.setItemText(5, _translate("MyMeta", "Series"))
        self.ScopeCombo.setItemText(6, _translate("MyMeta", "Non_Geographic Dataset"))
        self.ScopeCombo.setItemText(7, _translate("MyMeta", "Dimension Group"))
        self.ScopeCombo.setItemText(8, _translate("MyMeta", "Feature"))
        self.ScopeCombo.setItemText(9, _translate("MyMeta", "Feature Type"))
        self.ScopeCombo.setItemText(10, _translate("MyMeta", "Property Type"))
        self.ScopeCombo.setItemText(11, _translate("MyMeta", "Field Session"))
        self.ScopeCombo.setItemText(12, _translate("MyMeta", "Software"))
        self.ScopeCombo.setItemText(13, _translate("MyMeta", "Service"))
        self.ScopeCombo.setItemText(14, _translate("MyMeta", "Model"))
        self.ScopeCombo.setItemText(15, _translate("MyMeta", "Tile"))
        self.ScopeCombo.setItemText(16, _translate("MyMeta", "Initiative"))
        self.ScopeCombo.setItemText(17, _translate("MyMeta", "Stero-Mate"))
        self.ScopeCombo.setItemText(18, _translate("MyMeta", "Sensor"))
        self.ScopeCombo.setItemText(19, _translate("MyMeta", "Platform Series"))
        self.ScopeCombo.setItemText(20, _translate("MyMeta", "Sensor Series"))
        self.ScopeCombo.setItemText(21, _translate("MyMeta", "Production Series"))
        self.ScopeCombo.setItemText(22, _translate("MyMeta", "Transfer Series"))
        self.ScopeCombo.setItemText(23, _translate("MyMeta", "Other Series"))
        self.TempEndLab.setText(_translate("MyMeta", "Temporal Extent End Date"))
        self.DataUpFreqCombo.setItemText(0, _translate("MyMeta", "Continual"))
        self.DataUpFreqCombo.setItemText(1, _translate("MyMeta", "Daily"))
        self.DataUpFreqCombo.setItemText(2, _translate("MyMeta", "Weekly"))
        self.DataUpFreqCombo.setItemText(3, _translate("MyMeta", "Fortnightly"))
        self.DataUpFreqCombo.setItemText(4, _translate("MyMeta", "Monthly"))
        self.DataUpFreqCombo.setItemText(5, _translate("MyMeta", "Quarterly"))
        self.DataUpFreqCombo.setItemText(6, _translate("MyMeta", "Biannually"))
        self.DataUpFreqCombo.setItemText(7, _translate("MyMeta", "Annually"))
        self.DataUpFreqCombo.setItemText(8, _translate("MyMeta", "As-Needed"))
        self.DataUpFreqCombo.setItemText(9, _translate("MyMeta", "Irregular"))
        self.DataUpFreqCombo.setItemText(10, _translate("MyMeta", "Not Planned"))
        self.DataUpFreqCombo.setItemText(11, _translate("MyMeta", "Unknown"))
        self.DataUpFreqCombo.setItemText(12, _translate("MyMeta", "Semi-Monthly"))
        self.TpCatCombo.setItemText(0, _translate("MyMeta", "Transportation"))
        self.TpCatCombo.setItemText(1, _translate("MyMeta", "Farming"))
        self.TpCatCombo.setItemText(2, _translate("MyMeta", "Biota"))
        self.TpCatCombo.setItemText(3, _translate("MyMeta", "Boundaries"))
        self.TpCatCombo.setItemText(4, _translate("MyMeta", "Atmospheric Sciences"))
        self.TpCatCombo.setItemText(5, _translate("MyMeta", "Economy"))
        self.TpCatCombo.setItemText(6, _translate("MyMeta", "Elevation"))
        self.TpCatCombo.setItemText(7, _translate("MyMeta", "Environment"))
        self.TpCatCombo.setItemText(8, _translate("MyMeta", "Geo-Scientific"))
        self.TpCatCombo.setItemText(9, _translate("MyMeta", "Health"))
        self.TpCatCombo.setItemText(10, _translate("MyMeta", "Imagery & Base Maps"))
        self.TpCatCombo.setItemText(11, _translate("MyMeta", "Military & Intelligence"))
        self.TpCatCombo.setItemText(12, _translate("MyMeta", "Inland Waters"))
        self.TpCatCombo.setItemText(13, _translate("MyMeta", "Location"))
        self.TpCatCombo.setItemText(14, _translate("MyMeta", "Oceans"))
        self.TpCatCombo.setItemText(15, _translate("MyMeta", "Planning & Cadastral"))
        self.TpCatCombo.setItemText(16, _translate("MyMeta", "Society"))
        self.TpCatCombo.setItemText(17, _translate("MyMeta", "Structure"))
        self.TpCatCombo.setItemText(18, _translate("MyMeta", "Utilities & Communication"))
        self.MetaLab.setText(_translate("MyMeta", "<html><head/><body><p align=\"center\">Metadata Creation Date</p></body></html>"))
        self.TabController.setTabText(self.TabController.indexOf(self.TitlesAndDates), _translate("MyMeta", "Titles and Dates"))
        self.AbstractLab.setText(_translate("MyMeta", "Abstract"))
        self.MaintNoteLab.setText(_translate("MyMeta", "Maintenance \n""Notes"))
        self.PurposeLab.setText(_translate("MyMeta", "Purpose \n""(Summary)"))
        self.ProcessLab.setText(_translate("MyMeta", "Process \n""Description"))
        self.OnlineLinkLab.setText(_translate("MyMeta", "Online \n""Links"))
        self.CredLab.setText(_translate("MyMeta", "Credits"))
        self.LinLab.setText(_translate("MyMeta", "Lineage\n""Statement"))
        self.KeywordLab.setText(_translate("MyMeta", "Keywords"))
        self.UseConLab.setText(_translate("MyMeta", "Use Constraints"))
        self.SourceDescLab.setText(_translate("MyMeta", "Source \n""Description"))
        self.TabController.setTabText(self.TabController.indexOf(self.DatasetDescription), _translate("MyMeta", "Dataset Description"))
        self.DataRoleCombo.setItemText(0, _translate("MyMeta", "Custodian"))
        self.DataRoleCombo.setItemText(1, _translate("MyMeta", "Resource Provider"))
        self.DataRoleCombo.setItemText(2, _translate("MyMeta", "Owner"))
        self.DataRoleCombo.setItemText(3, _translate("MyMeta", "User"))
        self.DataRoleCombo.setItemText(4, _translate("MyMeta", "Distributor"))
        self.DataRoleCombo.setItemText(5, _translate("MyMeta", "Originator"))
        self.DataRoleCombo.setItemText(6, _translate("MyMeta", "Point Of Contact"))
        self.DataRoleCombo.setItemText(7, _translate("MyMeta", "Principal Investigator"))
        self.DataRoleCombo.setItemText(8, _translate("MyMeta", "Processor"))
        self.DataRoleCombo.setItemText(9, _translate("MyMeta", "Publisher"))
        self.DataRoleCombo.setItemText(10, _translate("MyMeta", "Author"))
        self.DataRoleCombo.setItemText(11, _translate("MyMeta", "Collaborator"))
        self.DataRoleCombo.setItemText(12, _translate("MyMeta", "Editor"))
        self.DataRoleCombo.setItemText(13, _translate("MyMeta", "Mediator"))
        self.DataRoleCombo.setItemText(14, _translate("MyMeta", "Rights Holder"))
        self.MetaPosLab.setText(_translate("MyMeta", "Position \n  Title"))
        self.DataNameLab.setText(_translate("MyMeta", "Full Name"))
        self.DataFaxLab.setText(_translate("MyMeta", "   Fax\n""Number"))
        self.DataRoleLab.setText(_translate("MyMeta", "Role"))
        self.DataEmailLab.setText(_translate("MyMeta", "Email"))
        self.DataWebLab.setText(_translate("MyMeta", "Website"))
        self.DataStateLab.setText(_translate("MyMeta", "State"))
        self.DataPhoneLab.setText(_translate("MyMeta", "Phone \n""Number"))
        self.DataZipLab.setText(_translate("MyMeta", "Zip Code"))
        self.DataSALab.setText(_translate("MyMeta", " Street \n""Address"))
        self.DataCitLab.setText(_translate("MyMeta", "City"))
        self.DataStateCombo.setItemText(0, _translate("MyMeta", "CT"))
        self.DataHOSLab.setText(_translate("MyMeta", "  Hours \n""    of \n"" Service"))
        self.DataCILab.setText(_translate("MyMeta", "   Contact \n""Instructions"))
        self.TabController.setTabText(self.TabController.indexOf(self.DataContactInformation), _translate("MyMeta", "Data Contact Information"))
        self.MetaCILab.setText(_translate("MyMeta", "  Contact\n""Instructions"))
        self.MetaHOSLab.setText(_translate("MyMeta", " Hours\n""   Of\n""Service"))
        self.MetaPhoneLab.setText(_translate("MyMeta", " Phone \n""Number"))
        self.MetaNameLab.setText(_translate("MyMeta", "Full Name"))
        self.MetaWebLab.setText(_translate("MyMeta", "Website"))
        self.MetaStateCombo.setItemText(0, _translate("MyMeta", "CT"))
        self.MetaRoleLab.setText(_translate("MyMeta", "Role"))
        self.MetaStateLab.setText(_translate("MyMeta", "State"))
        self.MetaSALab.setText(_translate("MyMeta", " Street\n""Address"))
        self.MetaCitLab.setText(_translate("MyMeta", "City"))
        self.MetaPosLab_2.setText(_translate("MyMeta", "Position \n""   Title"))
        self.MetaEmailLab.setText(_translate("MyMeta", "Email"))
        self.MetaFaxLab.setText(_translate("MyMeta", "   Fax\n""Number"))
        self.MetaZipLab.setText(_translate("MyMeta", "Zip Code"))
        self.MetaRoleCombo.setItemText(0, _translate("MyMeta", "Custodian"))
        self.MetaRoleCombo.setItemText(1, _translate("MyMeta", "Resource Provider"))
        self.MetaRoleCombo.setItemText(2, _translate("MyMeta", "Owner"))
        self.MetaRoleCombo.setItemText(3, _translate("MyMeta", "User"))
        self.MetaRoleCombo.setItemText(4, _translate("MyMeta", "Distributor"))
        self.MetaRoleCombo.setItemText(5, _translate("MyMeta", "Originator"))
        self.MetaRoleCombo.setItemText(6, _translate("MyMeta", "Point Of Contact"))
        self.MetaRoleCombo.setItemText(7, _translate("MyMeta", "Principal Investigator"))
        self.MetaRoleCombo.setItemText(8, _translate("MyMeta", "Processor"))
        self.MetaRoleCombo.setItemText(9, _translate("MyMeta", "Publisher"))
        self.MetaRoleCombo.setItemText(10, _translate("MyMeta", "Author"))
        self.MetaRoleCombo.setItemText(11, _translate("MyMeta", "Collaborator"))
        self.MetaRoleCombo.setItemText(12, _translate("MyMeta", "Editor"))
        self.MetaRoleCombo.setItemText(13, _translate("MyMeta", "Mediator"))
        self.MetaRoleCombo.setItemText(14, _translate("MyMeta", "Rights Holder"))
        self.autofill.setText(_translate("MyMeta", "Autofill From Data"))
        self.TabController.setTabText(self.TabController.indexOf(self.MetdataContactInformation), _translate("MyMeta", "Metadata Contact Information"))
        self.UsrNamLab.setText(_translate("MyMeta", "User Name"))
        self.PasLab.setText(_translate("MyMeta", "Password"))
        self.PortalURLLab.setText(_translate("MyMeta", "Portal URL"))
        self.PortalTestBTN.setText(_translate("MyMeta", "Connect"))
        self.TypeFilLab.setText(_translate("MyMeta", "Type \n""Filter"))
        self.TypeComboSel.setItemText(0, _translate("MyMeta", "Feature Service"))
        self.TypeComboSel.setItemText(1, _translate("MyMeta", "All"))
        self.TypeComboSel.setItemText(2, _translate("MyMeta", "Workforce Project"))
        self.TypeComboSel.setItemText(3, _translate("MyMeta", "Web Map"))
        self.TypeComboSel.setItemText(4, _translate("MyMeta", "Story Map"))
        self.TypeComboSel.setItemText(5, _translate("MyMeta", "Service Definition"))
        self.TypeComboSel.setItemText(6, _translate("MyMeta", "Insights Workbook"))
        self.TypeComboSel.setItemText(7, _translate("MyMeta", "Form"))
        self.TypeComboSel.setItemText(8, _translate("MyMeta", "Web Mapping Application"))
        self.TypeComboSel.setItemText(9, _translate("MyMeta", "Shapefile"))
        self.TypeComboSel.setItemText(10, _translate("MyMeta", "Hub Page"))
        self.TypeComboSel.setItemText(11, _translate("MyMeta", "File Geodatabase"))
        self.TypeComboSel.setItemText(12, _translate("MyMeta", "Dashboard"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.PortalLogin), _translate("MyMeta", "Portal Login"))
        self.CurFieldInfo.setText(_translate("MyMeta", "Current Field Information"))
        self.ImportBTN.setText(_translate("MyMeta", "Refresh"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.FieldInformation), _translate("MyMeta", "Field Information"))
        self.FieldSelLab.setText(_translate("MyMeta", "Domain Information"))
        self.DomainRefBTN.setText(_translate("MyMeta", "Refresh"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.DomainInformation), _translate("MyMeta", "Domain Information"))
        self.XMLOutLab.setText(_translate("MyMeta", "XML\n""Out\n""Path"))
        self.BrowseFol.setText(_translate("MyMeta", "Browse Folder"))
        self.RunBTN.setText(_translate("MyMeta", "Convert"))
        self.TabController.setTabText(self.TabController.indexOf(self.FieldImport), _translate("MyMeta", "Field Import"))
        self.XMLLab.setText(_translate("MyMeta", "File Path"))
        self.XMLBrowseBTN.setText(_translate("MyMeta", "Browse"))
        self.XMLImportBTN.setText(_translate("MyMeta", "Import"))
        self.TabController.setTabText(self.TabController.indexOf(self.XMLImport), _translate("MyMeta", "XML Importer"))


    def browse_files(self):
        filename = QFileDialog.getOpenFileName()
        pathname = filename[0]
        self.ConnFilBox.setText(str(pathname))


    def browse_folder(self):
        foldname = str(QFileDialog.getExistingDirectory(self.MyMetaWindow,'Select a Directory'))
        self.XMLOutBox.setText(str(foldname))


    def browse_xml(self):
        filename = QFileDialog.getOpenFileName()
        pathname = filename[0]
        self.XMLInBox.setText(str(pathname))


    def fieldlist(self):
        currentlayer = self.LayerSelectCombo.currentText()
        self.FieldSelCombo.clear()
        try:
            gis = GIS(url,usr,pas)
        
            search_result = gis.content.search(('title: '+currentlayer),"Feature Layer")
            search_result = search_result[0]
            self.FieldInfoTable.setRowCount(0)
            self.FieldInfoTable.setColumnCount(0)
            while (self.FieldInfoTable.rowCount() > 0):
                self.FieldInfoTable.removeRow(0)
                self.FieldInfoTable.removeColumn(0)
                self.FieldInfoTable.removeColumn(1)
                self.FieldInfoTable.removeColumn(2)
                self.FieldInfoTable.removeColumn(3)
                self.FieldInfoTable.removeColumn(4)
                self.FieldInfoTable.removeColumn(5)
                self.FieldInfoTable.removeColumn(6)
                self.FieldInfoTable.removeColumn(7)
                self.FieldInfoTable.removeColumn(8)
                self.FieldInfoTable.removeColumn(9)
                self.FieldInfoTable.removeColumn(10)
                
                

            
            self.FieldInfoTable.insertRow(0)
            self.FieldInfoTable.insertColumn(0)
            self.FieldInfoTable.insertColumn(1)
            self.FieldInfoTable.insertColumn(2)
            self.FieldInfoTable.insertColumn(3)
            self.FieldInfoTable.insertColumn(4)
            self.FieldInfoTable.insertColumn(5)
            self.FieldInfoTable.insertColumn(6)
            self.FieldInfoTable.insertColumn(7)
            self.FieldInfoTable.insertColumn(8)
            self.FieldInfoTable.insertColumn(9)
            self.FieldInfoTable.setItem(0, 0, QtWidgets.QTableWidgetItem('Name'))
            self.FieldInfoTable.setItem(0, 1, QtWidgets.QTableWidgetItem('Type'))
            self.FieldInfoTable.setItem(0, 2, QtWidgets.QTableWidgetItem('Alias'))
            self.FieldInfoTable.setItem(0, 3, QtWidgets.QTableWidgetItem('SQLType'))
            self.FieldInfoTable.setItem(0, 4, QtWidgets.QTableWidgetItem('Length'))
            self.FieldInfoTable.setItem(0, 5, QtWidgets.QTableWidgetItem('Percision'))
            self.FieldInfoTable.setItem(0, 6, QtWidgets.QTableWidgetItem('Scale'))
            self.FieldInfoTable.setItem(0, 7, QtWidgets.QTableWidgetItem('Nullable'))
            self.FieldInfoTable.setItem(0, 8, QtWidgets.QTableWidgetItem('Editable'))
            self.FieldInfoTable.setItem(0, 9, QtWidgets.QTableWidgetItem('DefaultValue'))
            for lyr in search_result.layers:
                rowcnt = 1
                for x in lyr.properties.fields:
                    self.FieldInfoTable.insertRow(rowcnt)
                    name = x['name']
                    typ = x['type']
                    fname = x['alias']
                    sqltype = x['sqlType']
                    try:
                        fieldlen = x['length']
                    except:
                        fieldlen = 'None'
                    try:
                        percision = x['percision']
                    except:
                        percision = 'N/A'
                    try:
                        scale = x['scale']
                    except:
                        scale = 'N/A'
                    
                    nullable = x['nullable']
                    editable = x['editable']
                    domain = x['domain']
                    defval = x['defaultValue']
                
                    
                    self.FieldInfoTable.setItem(rowcnt, 0, QtWidgets.QTableWidgetItem(name))
                    self.FieldInfoTable.setItem(rowcnt, 1, QtWidgets.QTableWidgetItem(typ))
                    self.FieldInfoTable.setItem(rowcnt, 2, QtWidgets.QTableWidgetItem(fname))
                    self.FieldInfoTable.setItem(rowcnt, 3, QtWidgets.QTableWidgetItem(sqltype))
                    self.FieldInfoTable.setItem(rowcnt, 4, QtWidgets.QTableWidgetItem(str(fieldlen)))
                    self.FieldInfoTable.setItem(rowcnt, 5, QtWidgets.QTableWidgetItem(str(percision)))
                    self.FieldInfoTable.setItem(rowcnt, 6, QtWidgets.QTableWidgetItem(str(scale)))
                    self.FieldInfoTable.setItem(rowcnt, 7, QtWidgets.QTableWidgetItem(str(nullable)))
                    self.FieldInfoTable.setItem(rowcnt, 8, QtWidgets.QTableWidgetItem(str(editable)))
                    self.FieldInfoTable.setItem(rowcnt, 9, QtWidgets.QTableWidgetItem(str(defval)))
                    
                    
                    
                    if domain != None:
                            self.FieldSelCombo.addItem(domain['name']) 
                    else:
                            continue
                            #print(domain)
                            
                    rowcnt +=1
        except:
                msg = QMessageBox()
                msg.setWindowTitle("Portal Connection Error")
                msg.setText("Couldn't connect to the portal :(")
                msg.setIcon(QMessageBox.Critical)
                msg.setStyleSheet("background-color: rgb(255,255,255);")
                msg.exec_()
                #QMessageBox.critical(self.FieldImport,"Portal Connection Error","Couldn't connect to the portal :(")


    def domain_btn(self):
        try:
            currentlayer = self.LayerSelectCombo.currentText()
            gis = GIS(url,usr,pas)
            search_result = gis.content.search(('title: '+currentlayer),"Feature Layer")
            search_result = search_result[0]
            self.DomainTableInfo.setRowCount(0)
            self.DomainTableInfo.setColumnCount(0)
            self.DomainTableInfo.insertRow(0)
            self.DomainTableInfo.insertColumn(0)
            self.DomainTableInfo.insertColumn(1)
            self.DomainTableInfo.setItem(0, 0, QtWidgets.QTableWidgetItem('code'))
            self.DomainTableInfo.setItem(0, 1, QtWidgets.QTableWidgetItem('value'))
            for lyr in search_result.layers:
                    for x in lyr.properties.fields:
                            if x['domain'] != None:
                                    name = x['domain']['name']
                                    if str(name) == self.FieldSelCombo.currentText():
                                            rowcnt = 1
                                            for y in x['domain']['codedValues']:
                                                    name = y['name']
                                                    code = y['code']
                                                    self.DomainTableInfo.insertRow(rowcnt)
                                                    self.DomainTableInfo.setItem(rowcnt,0,QtWidgets.QTableWidgetItem(str(code)))
                                                    self.DomainTableInfo.setItem(rowcnt,1,QtWidgets.QTableWidgetItem(name))
                                                    rowcnt +=1
                                            #print(x['domain']['codedValues'])
                                            #print(name)
                                    else:
                                            continue
                                    
                            else:
                                    continue
                                          
        except:
                msg = QMessageBox()
                msg.setWindowTitle("Portal Connection Error")
                msg.setText("Couldn't connect to the portal :(")
                msg.setIcon(QMessageBox.Critical)
                msg.setStyleSheet("background-color: rgb(255,255,255);")
                msg.exec_()
                #QMessageBox.critical(self.FieldImport,"Portal Connection Error","Couldn't connect to the portal :(")


    def TestConnection(self):
        try:

            global usr
            global pas
            global url
            

            # Production code
            
            usr = self.UsrNameBox.text()
            pas = self.PasBox.text()
            url = self.PortalURLBox.text()

            gis = GIS(url, usr, pas)
            while (self.ItemTable.rowCount() > 0):
                self.ItemTable.removeRow(0)
                self.ItemTable.removeColumn(0)
                self.ItemTable.removeColumn(1)
                self.ItemTable.removeColumn(2)
            self.ItemTable.setColumnCount = 0
            self.ItemTable.setRowCount = 0
            fil = self.TypeComboSel.currentText()
            if fil == 'All':
                fil = ""
            else:
                fil = fil
            global featurelst
            featurelst = []
            featurelstres = gis.content.search(query='owner:' + usr, item_type='Feature Service', max_items=1000)
            for y in featurelstres:
                featurelst.append(y.title)
            self.LayerSelectCombo.clear()
            featurelst.sort()
            self.LayerSelectCombo.addItems(featurelst)
            search_result = gis.content.search(query='owner:' + usr, item_type=fil, max_items=1000)
            self.ItemTable.setRowCount = len(search_result)
            self.ItemTable.insertRow(0)
            self.ItemTable.insertColumn(0)
            self.ItemTable.insertColumn(1)
            self.ItemTable.insertColumn(2)
            self.ItemTable.setItem(0, 0, QtWidgets.QTableWidgetItem('Title'))
            self.ItemTable.setItem(0, 1, QtWidgets.QTableWidgetItem('Type'))
            self.ItemTable.setItem(0, 2, QtWidgets.QTableWidgetItem('Owner'))
            row_cnt = 1
            for x in search_result:
                    self.ItemTable.insertRow(row_cnt)

                    row = x
                    title = x.title
                    ftype = x.type
                    owner = x.owner
                    self.ItemTable.setItem(
                        row_cnt, 0, QtWidgets.QTableWidgetItem(title))
                    self.ItemTable.setItem(
                        row_cnt, 1, QtWidgets.QTableWidgetItem(ftype))
                    self.ItemTable.setItem(
                        row_cnt, 2, QtWidgets.QTableWidgetItem(owner))
                    row_cnt += 1
        except:
                msg = QMessageBox()
                msg.setWindowTitle("Portal Connection Error")
                msg.setText("Couldn't connect to the portal :(")
                msg.setIcon(QMessageBox.Critical)
                msg.setStyleSheet("background-color: rgb(255,255,255);")
                msg.exec_()
                #QMessageBox.critical(self.MyMetaWindow,"Portal Connection Error","Please check your portal credentials and try again")
            

    def ConvertToXML(self):
        
        

        # ESRI Structure
        root = ET.Element('metadata')
        root.set("xml:lang", "en")
        dataIdInfo = ET.SubElement(root, 'dataIdInfo')
        idCitation = ET.SubElement(dataIdInfo, 'idCitation')
        # idcitation section
        restitle = ET.SubElement(idCitation, 'resTitle')
        restitle.text = self.TitleBox.text()
        resalttitle = ET.SubElement(idCitation, 'resAltTitle')
        resalttitle.text = self.alt_titlebox.text()

        # sub section date for idcitation
        date = ET.SubElement(idCitation, 'date')
        creadate = ET.SubElement(date, 'createDate')
        pubdate = ET.SubElement(date, 'pubDate')
        x = self.PubCal.selectedDate()
        x = x.toString('yyyy/MM/dd')
        pubdate.text = x
        revisedate = ET.SubElement(date, 'reviseDate')

        # citonlineres
        citonlineres = ET.SubElement(idCitation, 'citOnlineRes')
        linkage1 = ET.SubElement(citonlineres, 'linkage')
        linkage1.text = self.OnlineLinkBox.toPlainText()

        # citrespparty
        citrespparty = ET.SubElement(idCitation, 'citRespParty')
        indname = ET.SubElement(citrespparty, 'rpIndName')
        indname.text = self.DataNameBox.text()
        orgname1 = ET.SubElement(citrespparty, 'rpOrgName')
        orgname1.text = 'Connecticut Department of Transportation'
        posname1 = ET.SubElement(citrespparty, 'rpPosName')
        posname1.text = self.DataPosBox.text()

        role1 = ET.SubElement(citrespparty, 'role')
        rolecd1 = ET.SubElement(role1, 'RoleCd')
        datarole = self.DataRoleCombo.currentText()
        if datarole == 'Resource Provider':
            datarole = '01'
        elif datarole == 'Custodian':
            datarole = '02'
        elif datarole == 'Owner':
            datarole = '03'
        elif datarole == 'User':
            datarole = '04'
        elif datarole == 'Distributor':
            datarole = '05'
        elif datarole == 'Originator':
            datarole = '06'
        elif datarole == 'Point Of Contact':
            datarole = '07'
        elif datarole == 'Principal Investigator':
            datarole = '08'
        elif datarole == 'Processor':
            datarole = '09'
        elif datarole == 'Publisher':
            datarole = '10'
        elif datarole == 'Author':
            datarole = '11'
        elif datarole == 'Collaborator':
            datarole = '12'
        elif datarole == 'Editor':
            datarole = '13'
        elif datarole == 'Mediator':
            datarole = '14'
        elif datarole == 'Rights Holder':
            datarole = '15'
        rolecd1.set('value', datarole)

        # rpcntinfo
        cntinfo = ET.SubElement(citrespparty, 'rpCntInfo')
        cntaddress = ET.SubElement(cntinfo, 'cntAddress')
        cntaddress.set('addressType', 'postal')
        email1 = ET.SubElement(cntaddress, 'eMailAdd')
        email1.text = self.DataEmailBox.text()
        delpoint1 = ET.SubElement(cntaddress, 'delPoint')
        delpoint1.text = self.DataSABox.text()
        city1 = ET.SubElement(cntaddress, 'city')
        city1.text = self.DataCitBox.text()
        adminarea1 = ET.SubElement(cntaddress, 'adminArea')
        adminarea1.text = self.DataStateCombo.currentText()
        postcode1 = ET.SubElement(cntaddress, 'postCode')
        postcode1.text = self.DataZipBox.text()
        countr1 = ET.SubElement(cntaddress, 'country')
        countr1.text = "US"

        # cntPhone
        cntphone = ET.SubElement(cntinfo, 'cntPhone')
        pnum1 = ET.SubElement(cntphone, 'voiceNum')
        pnum1.text = self.DataPhoneBox.text()
        fnum1 = ET.SubElement(cntphone, 'faxNum')
        fnum1.text = self.DataFaxBox.text()

        # cntonlineres
        cntonlineres = ET.SubElement(cntinfo, 'cntOnlineRes')
        link = ET.SubElement(cntonlineres, 'linkage')
        link.text = self.DataLabBox.text()

        # cnthours
        cnthours1 = ET.SubElement(cntinfo, 'cntHours')
        cnthours1.text = self.DataHOSBox.toPlainText()

        # cntinstr
        cntinstr1 = ET.SubElement(cntinfo, 'cntInstr')
        cntinstr1.text = self.DataCIBox.toPlainText()

        # idAbs
        idabs = ET.SubElement(dataIdInfo, 'idAbs')
        idabs.text = self.AbBox.toPlainText()

        # idpurp
        idpurp = ET.SubElement(dataIdInfo, 'idPurp')
        idpurp.text = self.PurposeBox.toPlainText()

        # idCredit
        idcredit = ET.SubElement(dataIdInfo, 'idCredit')
        idcredit.text = self.CredBox.toPlainText()

        # datalang
        datalang = ET.SubElement(dataIdInfo, 'dataLang')
        langcode = ET.SubElement(datalang, 'languageCode').set("value", "ENG")
        councode = ET.SubElement(datalang, 'countryCode').set("value", "US")

        # datachar
        datachar = ET.SubElement(dataIdInfo, 'dataChar')
        charset = ET.SubElement(datachar, 'CharSetCd').set("value", "004")

        # idstatus
        idstatus = ET.SubElement(dataIdInfo, 'idStatus')

        prog_cd = self.StatusCombo.currentText()
        if prog_cd == 'Completed':
            prog_cd = '01'
        elif prog_cd == 'Historical Archive':
            prog_cd = '02'
        elif prog_cd == 'Obsolete':
            prog_cd = '03'
        elif prog_cd == 'On-Going':
            prog_cd = '04'
        elif prog_cd == 'Planned':
            prog_cd = '05'
        elif prog_cd == 'Required':
            prog_cd = '06'
        elif prog_cd == 'Under Development':
            prog_cd = '07'
        elif prog_cd == 'Proposed':
            prog_cd = '08'
        progcd = ET.SubElement(idstatus, 'ProgCd').set("value", prog_cd)

        # tpcat
        tpcat = ET.SubElement(dataIdInfo, 'tpCat')
        topcat = self.TpCatCombo.currentText()
        if topcat == 'Farming':
            topcat = '01'
        elif topcat == 'Biota':
            topcat = '02'
        elif topcat == 'Boundaries':
            topcat = '03'
        elif topcat == 'Atmospheric Sciences':
            topcat = '04'
        elif topcat == 'Economy':
            topcat = '05'
        elif topcat == 'Elevation':
            topcat = '06'
        elif topcat == 'Environment':
            topcat = '07'
        elif topcat == 'Geo-Scientific':
            topcat = '08'
        elif topcat == 'Health':
            topcat = '09'
        elif topcat == 'Imagery & Base Maps':
            topcat = '010'
        elif topcat == 'Military & Intelligence':
            topcat = '011'
        elif topcat == 'Inland Waters':
            topcat = '12'
        elif topcat == 'Location':
            topcat = '013'
        elif topcat == 'Oceans':
            topcat = '014'
        elif topcat == 'planning & Cadastral':
            topcat = '015'
        elif topcat == 'Society':
            topcat = '016'
        elif topcat == 'Structure':
            topcat = '017'
        elif topcat == 'Transportation':
            topcat = '018'
        elif topcat == 'Utilities & Communication':
            topcat = '019'
        else:
            topcat = ''
        topiccatcd = ET.SubElement(tpcat, 'TopicCatCd').set("value", topcat)

        # searchkeys
        searchkeys = ET.SubElement(dataIdInfo, 'searchKeys')
        keyword = self.KaywordBox.toPlainText()
        keyword = keyword.split(",")
        for x in keyword:
            keyword1 = ET.SubElement(searchkeys, 'keyword')
            keyword1.text = x
        # dataext
        dataext = ET.SubElement(dataIdInfo, 'dataExt')
        geoele = ET.SubElement(dataext, 'geoEle')
        geobndbox = ET.SubElement(geoele, 'GeoBndBox')
        westbl = ET.SubElement(geobndbox, 'westBL')
        westbl.text = '-73.7433'
        eastbl = ET.SubElement(geobndbox, 'eastBL')
        eastbl.text = '-71.7218'
        northbl = ET.SubElement(geobndbox, 'northBL')
        northbl.text = '42.0728'
        southbl = ET.SubElement(geobndbox, 'southBL')
        southbl.text = '40.9748'

        # tempele
        tempele = ET.SubElement(dataext, 'tempEle')
        tempext = ET.SubElement(tempele, 'TempExtent')
        extemp = ET.SubElement(tempext, 'exTemp')
        tmperiod = ET.SubElement(extemp, 'TM_Period')
        tmbegin = ET.SubElement(tmperiod, 'tmBegin')
        a = self.TempStartCal.selectedDate()
        a = a.toString('yyyy/MM/dd')
        tmbegin.text = a
        tmend = ET.SubElement(tmperiod, 'tmEnd')
        b = self.TempEndCal.selectedDate()
        b = b.toString('yyyy/MM/dd')
        tmend.text = b

        # resmaint
        resmaint = ET.SubElement(dataIdInfo, 'resMaint')
        maintfreq = ET.SubElement(resmaint, 'maintFreq')
        maintfreqcd = ET.SubElement(maintfreq, 'MaintFreqCd')
        mfc = self.DataUpFreqCombo.currentText()
        if mfc == 'Continual':
            mfc = '01'
        elif mfc == 'Daily':
            mfc = '02'
        elif mfc == 'Weekly':
            mfc = '03'
        elif mfc == 'Fortnightly':
            mfc = '04'
        elif mfc == 'Monthly':
            mfc = '05'
        elif mfc == 'Quarterly':
            mfc = '06'
        elif mfc == 'Biannually':
            mfc = '07'
        elif mfc == 'Annually':
            mfc = '08'
        elif mfc == 'As-Needed':
            mfc = '09'
        elif mfc == 'Irregular':
            mfc = '10'
        elif mfc == 'Not Planned':
            mfc = '11'
        elif mfc == 'Unknown':
            mfc = '12'
        elif mfc == 'Semi-Monthly':
            mfc = '13'
        maintfreqcd.set('value', mfc)

        datadatenext = ET.SubElement(resmaint, 'dateNext')
        a = self.DataUpCal.selectedDate()
        a = a.toString('yyyy/MM/dd')
        datadatenext.text = a

        maintnote1 = ET.SubElement(resmaint, 'maintNote')
        maintnote1.text = self.MaintNoteBox.toPlainText()

        # resconst
        resconst = ET.SubElement(dataIdInfo, 'resConst')
        consts = ET.SubElement(resconst, 'Consts')
        uselimit = ET.SubElement(consts, 'useLimit')
        uselimit.text = self.UseConBox.toPlainText()

        # dqinfo
        dqinfo = ET.SubElement(root, 'dqInfo')
        datalineage = ET.SubElement(dqinfo, 'dataLineage')
        statement = ET.SubElement(datalineage, 'statement')
        statement.text = self.LinBox.toPlainText()
        prcstep = ET.SubElement(datalineage, 'prcStep')
        stepdesc = ET.SubElement(prcstep, 'stepDesc')
        stepdesc.text = self.ProcessBox.toPlainText()
        stepsrc = ET.SubElement(prcstep, 'stepSrc')
        srcdesc = ET.SubElement(stepsrc, 'srcDesc')
        srcdesc.text = self.SourceDescBox.toPlainText()

        #eainfo
        eainfo = ET.SubElement(root,'eainfo')
        detailed = ET.SubElement(eainfo,'detailed')
        enttype = ET.SubElement(detailed,'enttyp')
        #------------------------------------------------------
        #need a new section for each field; same sections each time just different values
        try:
            gis = GIS(url,usr,pas)
        
            currentlayer = self.LayerSelectCombo.currentText()
            search_result = gis.content.search(('title: '+currentlayer),"Feature Layer")
            search_result = search_result[0]
            for lyr in search_result.layers:
                        for x in lyr.properties.fields:
                                name = x['name']
                                alias = x['alias']
                                
                                try:
                                    fieldlen = x['length']
                                except:
                                    fieldlen = 'None'
                                try:
                                    percision = x['percision']
                                except:
                                    percision = 'N/A'
                                try:
                                    scale = x['scale']
                                except:
                                    scale = 'N/A'

                                typ = x['type']

                                attr = ET.SubElement(detailed,'attr')
                
                                #this tag is for the field name
                                attrlabl = ET.SubElement(attr,'attrlabl')
                                attrlabl.text = name
                                #this tag is for the alias
                                attalias = ET.SubElement(attr,'attalias')
                                attalias.text = alias
                                #definition of the field
                                attrdef = ET.SubElement(attr,'attrdef')
                                #source definition of the field
                                attrdef = ET.SubElement(attr,'attrdefs')
                                #type
                                attrtype = ET.SubElement(attr,'attrtype')
                                attrtype.text = typ
                                #width
                                attwidth = ET.SubElement(attr,'attwidth')
                                attwidth.text = str(fieldlen)
                                #precision
                                atprecis = ET.SubElement(attr,'atprecis')
                                atprecis.text = str(percision)
                                #scale
                                attscale = ET.SubElement(attr,'attscale')
                                attscale.text = str(scale)
                                #index
                                atindex = ET.SubElement(attr,'atindex')
                
                                #Place holder for the next section
                                attrvai = ET.SubElement(attr,'attrvai')
                                #values i don't think we are going to use this
                                attrva = ET.SubElement(attrvai,'attrva')
                                attrvae = ET.SubElement(attrvai,'attrvae')
                                #place holder to set up domains
                                attrdomv = ET.SubElement(attr,'attrdomv')
                                #copy and paste the whole domain here
                                domainlst = []
                                if x['domain'] != None:
                                    for x in x['domain']['codedValues']:
                                        code = x['code']
                                        name = x['name']
                                        domainlst.append(str(code)+':'+name)
                                        
                                else:
                                    continue
                                
                                udom = ET.SubElement(attrdomv, 'udom')
                                udom.text = (','.join(domainlst))

        except:
                msg = QMessageBox()
                msg.setWindowTitle("Portal Connection Error")
                msg.setText("Couldn't connect to specified portal")
                msg.setIcon(QMessageBox.Critical)
                msg.setStyleSheet("background-color: rgb(255,255,255);")
                msg.exec_()
                #QMessageBox.critical(self.FieldImport,"Portal Connection Error","Couldn't connect to specified portal")
            
        # refsysinfo
        refsysinfo = ET.SubElement(root, 'refSysInfo')
        refsystem = ET.SubElement(refsysinfo, 'RefSystem')
        refsystem.set("dimension", 'horizontal')
        refsysid = ET.SubElement(refsystem, 'refSysId')
        idcodespace = ET.SubElement(refsysid, 'idCodeSpace')
        idcodespace.text = self.RefCombo.currentText()

        # esri
        esri = ET.SubElement(root, 'Esri')
        arcgisstyle = ET.SubElement(esri, 'ArcGISstyle')
        arcgisstyle.text = 'North American Profile of ISO19115 2003'
        creadate = ET.SubElement(esri, 'CreaDate')
        creadate.text = self.PubCal.dateTextFormat()
        creatime = ET.SubElement(esri, 'CreaTime')
        creatime.text = '14553400'
        moddate = ET.SubElement(esri, 'ModDate')
        # moddate.text = self.DataUpCal.date
        modtime = ET.SubElement(esri, 'ModTime')
        # modtime.text = str(ctime)
        synconce = ET.SubElement(esri, 'SyncOnce')
        synconce.text = 'TRUE'
        arcgisformat = ET.SubElement(esri, 'ArcGISFormat')
        arcgisformat.text = '1.0'
        arcgisprofile = ET.SubElement(esri, 'ArcGISProfile')
        arcgisprofile.text = 'NAP'
        publishstat = ET.SubElement(esri, 'PublishStatus')
        publishstat.text = 'editor:esri.dijit.metadata.editor'

        # mdhrlv
        mdhrlv = ET.SubElement(root, 'mdHrLv')
        scopecd = ET.SubElement(mdhrlv, 'ScopeCd')
        metascope = self.ScopeCombo.currentText()
        if metascope == 'Attribute':
            metascope = '01'
        elif metascope == 'Attribute Type':
            metascope = '02'
        elif metascope == 'Collection Hardware':
            metascope = '03'
        elif metascope == 'Collection Series':
            metascope = '04'
        elif metascope == 'Dataset':
            metascope = '05'
        elif metascope == 'Series':
            metascope = '06'
        elif metascope == 'Non_Geographic Dataset':
            metascope = '07'
        elif metascope == 'Dimension Group':
            metascope = '08'
        elif metascope == 'Feature':
            metascope = '09'
        elif metascope == 'Feature Type':
            metascope = '10'
        elif metascope == 'Property Type':
            metascope = '11'
        elif metascope == 'Field Session':
            metascope = '12'
        elif metascope == 'Software':
            metascope = '13'
        elif metascope == 'Service':
            metascope = '14'
        elif metascope == 'Model':
            metascope = '15'
        elif metascope == 'Tile':
            metascope = '16'
        elif metascope == 'Initiative':
            metascope = '17'
        elif metascope == 'Stero-Mate':
            metascope = '18'
        elif metascope == 'Sensor':
            metascope = '19'
        elif metascope == 'Platform Series':
            metascope = '20'
        elif metascope == 'Sensor Series':
            metascope = '21'
        elif metascope == 'Production Series':
            metascope = '22'
        elif metascope == 'Transfer Series':
            metascope = '23'
        elif metascope == 'Other Series':
            metascope = '24'
        scopecd.set('value', metascope)

        # mddatest
        mddatest = ET.SubElement(root, 'mdDateSt')
        d = self.MetaCal.selectedDate()
        d = d.toString('yyyy/MM/dd')
        mddatest.text = d

        # mdfileid
        mdfileid = ET.SubElement(root, 'mdFileID')

        # mdchar
        mdchar = ET.SubElement(root, 'mdChar')
        charsetcd = ET.SubElement(mdchar, 'CharSetCd').set('value', '004')

        # mdcontact
        mdcontact = ET.SubElement(root, 'mdContact')
        indnamemeta = ET.SubElement(mdcontact, 'rpIndName')
        indnamemeta.text = self.MetaNameBox.text()
        orgnamemeta = ET.SubElement(mdcontact, 'rpOrgName')
        orgnamemeta.text = 'Connecticut Department of Transportation'
        posnamemeta = ET.SubElement(mdcontact, 'rpPosName')
        posnamemeta.text = self.MetaPosBox.text()

        rolemeta = ET.SubElement(mdcontact, 'role')
        rolecdmeta = ET.SubElement(rolemeta, 'RoleCd')
        metarole = self.MetaRoleCombo.currentText()
        if metarole == 'Resource Provider':
            metarole = '01'
        elif metarole == 'Custodian':
            metarole = '02'
        elif metarole == 'Owner':
            metarole = '03'
        elif metarole == 'User':
            metarole = '04'
        elif metarole == 'Distributor':
            metarole = '05'
        elif metarole == 'Originator':
            metarole = '06'
        elif metarole == 'Point of Contact':
            metarole = '07'
        elif metarole == 'Principal Investigator':
            metarole = '08'
        elif metarole == 'Processor':
            metarole = '09'
        elif metarole == 'Publisher':
            metarole = '10'
        elif metarole == 'Author':
            metarole = '11'
        elif metarole == 'Collaborator':
            metarole = '12'
        elif metarole == 'Editor':
            metarole = '13'
        elif metarole == 'Mediator':
            metarole = '14'
        elif metarole == 'Rights Holder':
            metarole = '15'
        rolecdmeta.set('value', metarole)
        rpcntinfometa = ET.SubElement(mdcontact, 'rpCntInfo')

        # cntaddress
        cntaddressmeta = ET.SubElement(rpcntinfometa, 'cntAddress')
        cntaddressmeta.set('addressType', 'postal')
        emailmeta = ET.SubElement(cntaddressmeta, 'eMailAdd')
        emailmeta.text = self.MetaEmailBox.text()
        delpointmeta = ET.SubElement(cntaddressmeta, 'delPoint')
        delpointmeta.text = self.MetaSABox.text()
        citymeta = ET.SubElement(cntaddressmeta, 'city')
        citymeta.text = self.MetaCitBox.text()
        adminareameta = ET.SubElement(cntaddressmeta, 'adminArea')
        adminareameta.text = self.MetaStateCombo.currentText()
        postcodemeta = ET.SubElement(cntaddressmeta, 'postCode')
        postcodemeta.text = self.MetaZipBox.text()
        countrymeta = ET.SubElement(cntaddressmeta, 'country')
        countrymeta.text = "US"

        # cntphone
        cntphonemeta = ET.SubElement(rpcntinfometa, 'cntPhone')
        pnummeta = ET.SubElement(cntphonemeta, 'voiceNum')
        pnummeta.text = self.MetaPhoneBox.text()
        fnummeta = ET.SubElement(cntphonemeta, 'faxNum')
        fnummeta.text = self.MetaFaxBox.text()

        # cntonlineres
        cntonlineresmeta = ET.SubElement(rpcntinfometa, 'cntOnlineRes')
        linkmeta = ET.SubElement(cntonlineresmeta, 'linkage')
        linkmeta.text = self.MetaWebBox.text()

        # cnthours
        hoursmeta = ET.SubElement(rpcntinfometa, 'cntHours')
        hoursmeta.text = self.MetaHOSBox.toPlainText()

        # cntinstr
        cntinstrmeta = ET.SubElement(rpcntinfometa, 'cntInstr')
        cntinstrmeta.text = self.MetaCIBox.toPlainText()

        # mdMaint
        mdmaint = ET.SubElement(root, 'mdMaint')
        maintfreqmeta = ET.SubElement(mdmaint, 'maintFreq')
        metafreq = self.MetaUpFreqCombo.currentText()
        if metafreq == 'Continual':
            metafreq = '01'
        elif metafreq == 'Daily':
            metafreq = '02'
        elif metafreq == 'Weekly':
            metafreq = '03'
        elif metafreq == 'Fortnightly':
            metafreq = '04'
        elif metafreq == 'Monthly':
            metafreq = '05'
        elif metafreq == 'Quarterly':
            metafreq = '06'
        elif metafreq == 'Biannually':
            metafreq = '07'
        elif metafreq == 'Annually':
            metafreq = '08'
        elif metafreq == 'As-Needed':
            metafreq = '09'
        elif metafreq == 'Irregular':
            metafreq = '10'
        elif metafreq == 'Not-Planned':
            metafreq = '11'
        elif metafreq == 'Unknown':
            metafreq = '12'
        elif metafreq == 'Semi-Monthly':
            metafreq = '13'
        maintfreqcdmeta = ET.SubElement(
            maintfreqmeta, 'MaintFreqCd').set("value", metafreq)

        datenext = ET.SubElement(mdmaint, 'dateNext')
        c = self.MetaUpCal.selectedDate()
        c = c.toString('yyyy/MM/dd')
        datenext.text = c

        tree2 = ET.ElementTree(root)
        xmlout = self.XMLOutBox.text()
        
        
        
            
            
        if xmlout != '':
        
            xmlout = os.path.join(xmlout,self.TitleBox.text()+'.xml')
            tree2.write(xmlout, encoding="UTF-8", xml_declaration=True)
            nn = "XML Exported to "
            nn = nn + xmlout
            
            msg = QMessageBox()
            msg.setWindowTitle("XML Created!")
            msg.setText(nn)
            msg.setIcon(QMessageBox.Information)
            msg.setStyleSheet("background-color: rgb(255,255,255);")
            msg.exec_()
            #QMessageBox.information(self.FieldImport,"XML Created!",nn)

        else:
                msg = QMessageBox()
                msg.setWindowTitle("Output Error")
                msg.setText('Please specify a valid folder path')
                msg.setIcon(QMessageBox.Critical)
                msg.setStyleSheet("background-color: rgb(255,255,255);")
                msg.exec_()
                #QMessageBox.critical(self.FieldImport,'Output Error','Please specify a valid folder path')
        

    def importXML(self):
        
        xmlin = self.XMLInBox.text()
        if xmlin == '' or xmlin == None:
                msg = QMessageBox()
                msg.setWindowTitle("Output Path Error")
                msg.setText('Please Check XML Output path. Invalid path')
                msg.setIcon(QMessageBox.Critical)
                msg.setStyleSheet("background-color: rgb(255,255,255);")
                msg.exec_()

        else:
                pass
                mytree = ET.parse(xmlin)
                myroot = mytree.getroot()
                missinglst = []

                #Title Box
        
                title = myroot.find('.//resTitle')
                if title.text == None or title.text == '':
                        missinglst.append('Title')
                        self.TitleBox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.TitleBox.setText(title.text)

                #Alt Title Box

                altitle = myroot.find('.//resAltTitle')
                if altitle.text == None or altitle.text == '':
                        missinglst.append('Alternate Title')
                        self.alt_titlebox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.alt_titlebox.setText(altitle.text)

                #Topic Category Box

                tpcat = myroot.find('.//TopicCatCd')
                tpcat = tpcat.attrib
                topcat = tpcat['value']

                if topcat == '' or topcat == '':
                        topcat = '018'
                else:
                        topcat = topcat
                
                if topcat == '01':
                        topcat = 'Farming'
                elif topcat == '02':
                        topcat = 'Biota'
                elif topcat == '03':
                        topcat = 'Boundaries'
                elif topcat == '04':
                        topcat = 'Atmospheric Sciences'
                elif topcat == '05':
                        topcat = 'Economy'
                elif topcat == '06':
                        topcat = 'Elevation'
                elif topcat == '07':
                        topcat = 'Environment'
                elif topcat == '08':
                        topcat = 'Geo-Scientific'
                elif topcat == '09':
                        topcat = 'Health'
                elif topcat == '010':
                        topcat = 'Imagery & Base Maps'
                elif topcat == '011':
                        topcat = 'Military & Intelligence'
                elif topcat == '012':
                        topcat = 'Inland Waters'
                elif topcat == '013':
                        topcat = 'Location'
                elif topcat == '014':
                        topcat = 'Oceans'
                elif topcat == '015':
                        topcat = 'planning & Cadastral'
                elif topcat == '016':
                        topcat = 'Society'
                elif topcat == '017':
                        topcat = 'Structure'
                elif topcat == '018':
                        topcat = 'Transportation'
                elif topcat == '019':
                        topcat = 'Utilities & Communication'
                else:
                        topcat = ''

                index = self.TpCatCombo.findText(topcat,QtCore.Qt.MatchFixedString)
                self.TpCatCombo.setCurrentIndex(index)

                # data update frequency

                mfc = myroot.find('.//MaintFreqCd')
                mfc = mfc.attrib
                mfc = mfc['value']

                if mfc == '':
                        mfc = '12'
                        missinglst.append('Metadata Frequency Update')
                else:
                        pass    
                


                if mfc == '01':
                        mfc = 'Continual'
                elif mfc == '02':
                        mfc = 'Daily'
                elif mfc == '03':
                        mfc = 'Weekly'
                elif mfc == '04':
                        mfc = 'Fortnightly'
                elif mfc == '05':
                        mfc = 'Monthly'
                elif mfc == '06':
                        mfc = 'Quarterly'
                elif mfc == '07':
                        mfc = 'Biannually'
                elif mfc == '08':
                        mfc = 'Annually'
                elif mfc == '09':
                        mfc = 'As-Needed'
                elif mfc == '10':
                        mfc = 'Irregular'
                elif mfc == '11':
                        mfc = 'Not Planned'
                elif mfc == '12':
                        mfc = 'Unknown'
                elif mfc == '13':
                        mfc = 'Semi-Monthly'
                index = self.DataUpFreqCombo.findText(mfc,QtCore.Qt.MatchFixedString)
                self.DataUpFreqCombo.setCurrentIndex(index)
        
                # reference system

                refsys = myroot.find('.//idCodeSpace')
                refsys = refsys.text
                index = self.RefCombo.findText(refsys,QtCore.Qt.MatchFixedString)
                self.RefCombo.setCurrentIndex(index)


                # scope level

                metascope = myroot.find('.//ScopeCd')
                metascope = metascope.attrib
                metascope = metascope['value']
                if metascope == '':
                        metascope = '02'
                        missinglst.append('Scope Level')
                else:
                        metascope = metascope
                


                if metascope == '01':
                        metascope = 'Attribute'
                elif metascope == '02':
                        metascope = 'Attribute Type'
                elif metascope == '03':
                        metascope = 'Collection Hardware'
                elif metascope == '04':
                        metascope = 'Collection Series'
                elif metascope == '05':
                        metascope = 'Dataset'
                elif metascope == '06':
                        metascope = 'Series'
                elif metascope == '07':
                        metascope = 'Non_Geographic Dataset'
                elif metascope == '08':
                        metascope = 'Dimension Group'
                elif metascope == '09':
                        metascope = 'Feature'
                elif metascope == '10':
                        metascope = 'Feature Type'
                elif metascope == '11':
                        metascope = 'Property Type'
                elif metascope == '12':
                        metascope = 'Field Session'
                elif metascope == '13':
                        metascope = 'Software'
                elif metascope == '14':
                        metascope = 'Service'
                elif metascope == '15':
                        metascope = 'Model'
                elif metascope == '16':
                        metascope = 'Tile'
                elif metascope == '17':
                        metascope = 'Initiative'
                elif metascope == '18':
                        metascope = 'Stero-Mate'
                elif metascope == '19':
                        metascope = 'Sensor'
                elif metascope == '20':
                        metascope = 'Platform Series'
                elif metascope == '21':
                        metascope = 'Sensor Series'
                elif metascope == '22':
                        metascope = 'Production Series'
                elif metascope == '23':
                        metascope = 'Transfer Series'
                elif metascope == '24':
                        metascope = 'Other Series'
                index = self.ScopeCombo.findText(metascope,QtCore.Qt.MatchFixedString)
                self.ScopeCombo.setCurrentIndex(index)
                
                # status

                try:
                        prog_cd = myroot.find('.//ProgCd')
                        prog_cd = prog_cd.attrib
                        prog_cd = prog_cd['value']
                except:
                        prog_cd = ''
                        missinglst.append('Status')

                
                

                if prog_cd == '01':
                        prog_cd = 'Completed'
                elif prog_cd == '02':
                        prog_cd = 'Historical Archive'
                elif prog_cd == '03':
                        prog_cd = 'Obsolete'
                elif prog_cd == '04':
                        prog_cd = 'On-Going'
                elif prog_cd == '05':
                        prog_cd = 'Planned'
                elif prog_cd == '06':
                        prog_cd = 'Required'
                elif prog_cd == '07':
                        prog_cd = 'Under Development'
                elif prog_cd == '08':
                        prog_cd = 'Proposed'
                
                index = self.StatusCombo.findText(prog_cd,QtCore.Qt.MatchFixedString)
                self.StatusCombo.setCurrentIndex(index)

                # metadata update frequency

                mfc = myroot.find('.//MaintFreqCd')
                mfc = mfc.attrib
                mfc = mfc['value']


                if mfc == '01':
                        mfc = 'Continual'
                elif mfc == '02':
                        mfc = 'Daily'
                elif mfc == '03':
                        mfc = 'Weekly'
                elif mfc == '04':
                        mfc = 'Fortnightly'
                elif mfc == '05':
                        mfc = 'Monthly'
                elif mfc == '06':
                        mfc = 'Quarterly'
                elif mfc == '07':
                        mfc = 'Biannually'
                elif mfc == '08':
                        mfc = 'Annually'
                elif mfc == '09':
                        mfc = 'As-Needed'
                elif mfc == '10':
                        mfc = 'Irregular'
                elif mfc == '11':
                        mfc = 'Not Planned'
                elif mfc == '12':
                        mfc = 'Unknown'
                elif mfc == '13':
                        mfc = 'Semi-Monthly'
                index = self.MetaUpFreqCombo.findText(mfc,QtCore.Qt.MatchFixedString)
                self.MetaUpFreqCombo.setCurrentIndex(index)

                #pub date
                #         
                try:
                        qtdate = myroot.find('.//pubDate')
                        qtdate = QtCore.QDate.fromString(qtdate.text, 'yyyy/MM/dd')
                except:
                        qtdate = QtCore.QDate.currentDate()


                self.PubCal.setSelectedDate(qtdate)

                # data next update
                
                try:
                        qtdate = myroot.find('.//dateNext')
                        qtdate = QtCore.QDate.fromString(qtdate.text, 'yyyy/MM/dd')
                except:
                        qtdate = QtCore.QDate.currentDate()
                
                self.DataUpCal.setSelectedDate(qtdate)

                # temporal extent start

                try:
                        qtdate = myroot.find('.//tmBegin')
                        qtdate = QtCore.QDate.fromString(qtdate.text,'yyyy/MM/dd')
                except:
                        qtdate = QtCore.QDate.currentDate()
                self.TempStartCal.setSelectedDate(qtdate)

                # temporal extent end

                try:
                        qtdate = myroot.find('.//tmEnd')
                        qtdate = QtCore.QDate.fromString(qtdate.text,'yyyy/MM/dd')
                except:
                        qtdate = QtCore.QDate.currentDate()
                self.TempEndCal.setSelectedDate(qtdate)

                # metadata created date

                try:
                        qtdate = myroot.find('.//mdDateSt')
                        qtdate = QtCore.QDate.fromString(qtdate.text,'yyyy/MM/dd')
                except:
                        qtdate = QtCore.QDate.currentDate()
                self.MetaCal.setSelectedDate(qtdate)

                # Metadata next updated date

                try:
                        qtdate = myroot.find('.//dateNext')
                        qtdate = QtCore.QDate.fromString(qtdate.text,'yyyy/MM/dd')
                except:
                        qtdate = QtCore.QDate.currentDate()
                self.MetaUpCal.setSelectedDate(qtdate)

                # Abstract

                abstract = myroot.find('.//idAbs')
                if abstract.text == '' or abstract.text == None:
                        self.AbBox.setText('MISSING VALUE OR COULD NOT READ')
                        missinglst.append('Abstract')
                else:
                        self.AbBox.setText(abstract.text)
                
                # Purpose

                purpose = myroot.find('.//idPurp')
                if purpose.text == '' or purpose.text == None:
                        self.PurposeBox.setText('MISSING VALUE OR COULD NOT READ')
                        missinglst.append('Purpose')
                else:
                        self.PurposeBox.setText(purpose.text)
                
                # credits

                credit = myroot.find('.//idCredit')
                if credit.text == '' or credit.text == None:
                        self.CredBox.setText('MISSING VALUE OR COULD NOT READ')
                        missinglst.append('Credits')
                else:
                        self.CredBox.setText(credit.text)
                
                # keywords

                keys = []
                for x in myroot.find('.//searchKeys'):
                        if x.text == '' or x.text == None:
                                self.KaywordBox.setText('MISSING VALUE OR COULD NOT READ')
                                missinglst.append('Keywords')
                        else:
                                keys.append(x.text)
                                self.KaywordBox.setText(''.join(keys))
                                
                # Use constraints

                constraints = myroot.find('.//useLimit') 
                if constraints.text == '' or constraints.text == None:
                        self.UseConBox.setText('MISSING VALUE OR COULD NOT READ')
                        missinglst.append('Use Constraints')
                else:
                        self.UseConBox.setText(constraints.text)
                
                # lineage statement

                linstat = myroot.find('.//statement')
                if linstat.text == '' or linstat.text == None:
                        self.LinBox.setText('MISSING VALUE OR COULD NOT READ')
                        missinglst.append('Lineage Statement')
                else:
                        self.LinBox.setText(linstat.text)
                

                # process description

                processdesc = myroot.find('.//stepDesc')
                if processdesc.text == '' or processdesc.text == None:
                        self.ProcessBox.setText('MISSING VALUE OR COULD NOT READ')
                        missinglst.append('Process Description')
                else:
                        self.ProcessBox.setText(processdesc.text)

                # source description

                sourcedesc = myroot.find('.//srcDesc')
                if sourcedesc.text == '' or sourcedesc.text == None:
                        self.SourceDescBox.setText('MISSING VALUE OR COULD NOT READ')
                        missinglst.append('Source Description')
                else:
                        self.SourceDescBox.setText(sourcedesc.text)

                # maintenance notes

                maintnote = myroot.find('.//maintNote')
                if maintnote.text == '' or maintnote.text == None:
                        self.MaintNoteBox.setText('MISSING VALUE OR COULD NOT READ')
                        missinglst.append("Maintenance Notes")
                else: 
                        self.MaintNoteBox.setText(maintnote.text)

                # Online links

                onlinelink = myroot.find('.//linkage')
                if onlinelink.text == '' or onlinelink.text == None:
                        self.OnlineLinkBox.setText('MISSING VALUE OR COULD NOT READ')
                        missinglst.append('Online Links')
                else:
                        self.OnlineLinkBox.setText(onlinelink.text)

                # data role

                datarole = myroot.find('.//RoleCd')
                datarole = datarole.attrib
                datarole = datarole['value']
                if datarole == '' or datarole == None:
                        missinglst.append('Data Role')
                else:
                        pass
                

                if datarole == '01':
                        datarole = 'Resource Provider'
                elif datarole == '02':
                        datarole = 'Custodian'
                elif datarole == '03':
                        datarole = 'Owner'
                elif datarole == '04':
                        datarole = 'User'
                elif datarole == '05':
                        datarole = 'Distributor'
                elif datarole == '06':
                        datarole = 'Originator'
                elif datarole == '07':
                        datarole = 'Point Of Contact'
                elif datarole == '08':
                        datarole = 'Principal Investigator'
                elif datarole == '09':
                        datarole = 'Processor'
                elif datarole == '10':
                        datarole = 'Publisher'
                elif datarole == '11':
                        datarole = 'Author'
                elif datarole == '12':
                        datarole = 'Collaborator'
                elif datarole == '13':
                        datarole = 'Editor'
                elif datarole == '14':
                        datarole = 'Mediator'
                elif datarole == '15':
                        datarole = 'Rights Holder'
                index = self.DataRoleCombo.findText(datarole,QtCore.Qt.MatchFixedString)
                self.DataRoleCombo.setCurrentIndex(index)

                # data full name

                datanam = myroot.find('.//citRespParty/rpIndName')
                if datanam.text == '' or datanam.text == None:
                        self.DataNameBox.setText('MISSING VALUE OR COULD NOT READ')
                        missinglst.append('Data Full Name')
                else:
                        self.DataNameBox.setText(datanam.text)

                # data position title

                datapostitle = myroot.find('.//citRespParty/rpPosName')
                if datapostitle.text == '' or datapostitle.text == None:
                        self.DataPosBox.setText('MISSING VALUE OR COULD NOT READ')
                        missinglst.append('Data Position Title')
                else:
                        self.DataPosBox.setText(datapostitle.text)
                
                # data email

                daemail = myroot.find('.//cntAddress/eMailAdd')
                if daemail.text == '' or daemail.text == None:
                        missinglst.append('Data Email')
                        self.DataEmailBox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.DataEmailBox.setText(daemail.text)

                # phone number

                phonum = myroot.find('.//cntPhone/voiceNum')
                if phonum.text == '' or phonum.text == None:
                        missinglst.append('Data Phone Number')
                        self.DataPhoneBox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.DataPhoneBox.setText(phonum.text)
                # data fax

                datafax = myroot.find('.//cntPhone/faxNum')
                if datafax.text == '' or datafax.text == None:
                        missinglst.append('Data Fax Number')
                        self.DataFaxBox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.DataFaxBox.setText(datafax.text)

                # data street address

                datasa = myroot.find('.//cntAddress/delPoint')
                if datasa.text == '' or datasa.text == None:
                        missinglst.append('Data Street Address')
                        self.DataSABox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.DataSABox.setText(datasa.text)

                # data city

                datacity = myroot.find('.//cntAddress/city')
                if datacity.text == '' or datacity.text == None:
                        missinglst.append('Data City')
                        self.DataCitBox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.DataCitBox.setText(datacity.text)

                # data state

                datastate = myroot.find('.//cntAddress/adminArea')
                if datastate.text == '' or datastate.text == None:
                        index = self.DataStateCombo.findText(datastate.text,QtCore.Qt.MatchFixedString)
                        self.DataStateCombo.setCurrentIndex(index)
                        missinglst.append('Data State')
                else:
                        if datastate.text == 'CT':
                                datastate.text = 'CT'
                        index = self.DataStateCombo.findText(datastate.text,QtCore.Qt.MatchFixedString)
                        self.DataStateCombo.setCurrentIndex(index)

                # data zip

                datazip = myroot.find('.//cntAddress/postCode')
                if datazip.text == '' or datazip.text == None:
                        missinglst.append('Data Zip Code')
                        self.DataZipBox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.DataZipBox.setText(datazip.text)
                
                # data website

                dataweb = myroot.find('.//cntOnlineRes/linkage')
                if dataweb.text == '' or dataweb.text == None:
                        missinglst.append('Data Website')
                        self.DataLabBox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.DataLabBox.setText(dataweb.text)

                # data hours of service

                datahos = myroot.find('.//rpCntInfo/cntHours')
                if datahos.text == '' or datahos.text == None:
                        self.DataHOSBox.setText('MISSING VALUE OR COULD NOT READ')
                        missinglst.append('Data Hours of Service')
                else:
                        self.DataHOSBox.setText(datahos.text)

                # data contact instructions

                datacon = myroot.find('.//rpCntInfo/cntInstr')
                if datacon.text == '' or datacon.text == None:
                        self.DataCIBox.setText('MISSING VALUE OR COULD NOT READ')
                        missinglst.append('Data Contact Instructions')
                else:
                        self.DataCIBox.setText(datacon.text)

                # meta role
                try:
                        datarole = myroot.find('.//mdContact/role/RoleCd')
                        datarole = datarole.attrib
                        datarole = datarole['value']
                except:
                        datarole = ''

                if datarole == '01':
                        datarole = 'Resource Provider'
                elif datarole == '02':
                        datarole = 'Custodian'
                elif datarole == '03':
                        datarole = 'Owner'
                elif datarole == '04':
                        datarole = 'User'
                elif datarole == '05':
                        datarole = 'Distributor'
                elif datarole == '06':
                        datarole = 'Originator'
                elif datarole == '07':
                        datarole = 'Point Of Contact'
                elif datarole == '08':
                        datarole = 'Principal Investigator'
                elif datarole == '09':
                        datarole = 'Processor'
                elif datarole == '10':
                        datarole = 'Publisher'
                elif datarole == '11':
                        datarole = 'Author'
                elif datarole == '12':
                        datarole = 'Collaborator'
                elif datarole == '13':
                        datarole = 'Editor'
                elif datarole == '14':
                        datarole = 'Mediator'
                elif datarole == '15':
                        datarole = 'Rights Holder'
                index = self.MetaRoleCombo.findText(datarole,QtCore.Qt.MatchFixedString)
                self.MetaRoleCombo.setCurrentIndex(index)

                # meta full name

                metaname = myroot.find('.//mdContact/rpIndName')
                if metaname.text == ''  or metaname.text == None:
                        missinglst.append('Meta Full Name')
                        self.MetaNameBox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.MetaNameBox.setText(metaname.text)

                # meta position title

                metapos = myroot.find('.//mdContact/rpPosName')
                if metapos.text == '' or metapos.text == None:
                        missinglst.append('Meta Position Title')
                        self.MetaPosBox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.MetaPosBox.setText(metapos.text)

                # meta email

                metaemail = myroot.find('.//mdContact/rpCntInfo/cntAddress/eMailAdd')
                if metaemail.text == '' or metaemail.text == None:
                        missinglst.append('Meta Email')
                        self.MetaEmailBox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.MetaEmailBox.setText(metaemail.text)

                # meta phone

                metaphone = myroot.find('.//mdContact/rpCntInfo/cntPhone/voiceNum')
                if metaphone.text == '' or metaphone.text == None:
                        missinglst.append('Meta Phone Number')
                        self.MetaPhoneBox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.MetaPhoneBox.setText(metaphone.text)

                # meta fax

                metafax = myroot.find('.//mdContact/rpCntInfo/cntPhone/faxNum')
                if metafax.text == '' or metafax.text == None:
                        missinglst.append('Meta Fax Number')
                        self.MetaFaxBox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.MetaFaxBox.setText(metafax.text)

                # meta street address

                metasa = myroot.find('.//mdContact/rpCntInfo/cntAddress/delPoint')
                if metasa.text == '' or metasa.text == None:
                        missinglst.append('Meta Street Address')
                        self.MetaSABox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.MetaSABox.setText(metasa.text)

                # meta city

                metacity = myroot.find('.//mdContact/rpCntInfo/cntAddress/city')
                if metacity.text == '' or metacity.text == None:
                        missinglst.append('Meta City')
                        self.MetaCitBox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.MetaCitBox.setText(metacity.text)

                # meta state

                metastate = myroot.find('.//mdContact/rpCntInfo/cntAddress/adminArea')
                if metastate.text == '' or metastate.text == None:
                        missinglst.append('Meta State')
                        index = self.MetaStateCombo.findText(metastate.text,QtCore.Qt.MatchFixedString)
                        self.MetaStateCombo.setCurrentIndex(index)
                else:
                        if metastate.text == 'CT':
                                metastate = 'CT'
                                index = self.MetaStateCombo.findText(metastate,QtCore.Qt.MatchFixedString)
                                self.MetaStateCombo.setCurrentIndex(index)

                # meta zip

                metazip = myroot.find('.//mdContact/rpCntInfo/cntAddress/postCode')
                if metazip.text == '' or metazip.text == None:
                        missinglst.append('Meta Zip Code')
                        self.MetaZipBox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.MetaZipBox.setText(metazip.text)

                # meta website

                metaweb = myroot.find('.//mdContact/rpCntInfo/cntOnlineRes/linkage')
                if metaweb.text == '' or metaweb.text == None:
                        missinglst.append('Meta Website')
                        self.MetaWebBox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.MetaWebBox.setText(metaweb.text)

                # meta hours of service

                metahos = myroot.find('.//mdContact/rpCntInfo/cntHours')
                if metahos.text == '' or metahos.text == None:
                        missinglst.append('Meta Hours of Service')
                        self.MetaHOSBox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.MetaHOSBox.setText(metahos.text)

                # meta contact instructions

                metacon = myroot.find('.//mdContact/rpCntInfo/cntInstr')
                if metacon.text == '' or metacon.text == None:
                        missinglst.append('Meta Contact Instructions')
                        self.MetaCIBox.setText('MISSING VALUE OR COULD NOT READ')
                else:
                        self.MetaCIBox.setText(metacon.text)
                
                if len(missinglst) > 0:
                        msg = QMessageBox()
                        msg.setWindowTitle("Warning!")
                        msg.setText('XML Imported With Errors')
                        msg.setIcon(QMessageBox.Warning)
                        msg.setStyleSheet("background-color: rgb(255,255,255);")
                        a = '\r\n'.join(missinglst)
                        msg.setDetailedText("Error occured on fields: \r\n" + a)
                        msg.exec_()
                        
                else:
                        msg = QMessageBox()
                        msg.setWindowTitle("XML Created!")
                        msg.setText('XML Successfully Imported')
                        msg.setIcon(QMessageBox.Information)
                        msg.setStyleSheet("background-color: rgb(255,255,255);")
                        msg.exec_()
                #QMessageBox.information(self.FieldImport,"XML Created!","XML Successfully Imported")
        
    
    
    def autopopulate(self):
        #role
        datarole = self.DataRoleCombo.currentText()
        index = self.MetaRoleCombo.findText(datarole,QtCore.Qt.MatchFixedString)
        self.MetaRoleCombo.setCurrentIndex(index)
        #full name
        fullname = self.DataNameBox.text()
        self.MetaNameBox.setText(fullname)
        #position title
        pos = self.DataPosBox.text()
        self.MetaPosBox.setText(pos)
        #email
        email = self.DataEmailBox.text()
        self.MetaEmailBox.setText(email)
        #phone Number
        ph = self.DataPhoneBox.text()
        self.MetaPhoneBox.setText(ph)
        #fax number
        fax = self.DataFaxBox.text()
        self.MetaFaxBox.setText(fax)
        #street address
        sa = self.DataSABox.text()
        self.MetaSABox.setText(sa)
        #city
        cit = self.DataCitBox.text()
        self.MetaCitBox.setText(cit)
        #state
        stat = self.DataStateCombo.currentText()
        index = self.MetaStateCombo.findText(stat,QtCore.Qt.MatchFixedString)
        self.MetaStateCombo.setCurrentIndex(index)
        #zip
        zipper = self.DataZipBox.text()
        self.MetaZipBox.setText(zipper)
        #website
        web = self.DataLabBox.text()
        self.MetaWebBox.setText(web)
        #hours of service
        hos = self.DataHOSBox.toPlainText()
        self.MetaHOSBox.setText(hos)
        #contact instructions
        cti = self.DataCIBox.toPlainText()
        self.MetaCIBox.setText(cti)





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MyMeta = QtWidgets.QMainWindow()
    ui = Ui_MyMeta()
    ui.setupUi(MyMeta)
    MyMeta.show()
    sys.exit(app.exec_())
